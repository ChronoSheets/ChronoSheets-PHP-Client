<?php
/**
 * ReportsApi
 * PHP version 5
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ChronoSheetsClient\ApiException;
use ChronoSheetsClient\Configuration;
use ChronoSheetsClient\HeaderSelector;
use ChronoSheetsClient\ObjectSerializer;

/**
 * ReportsApi Class Doc Comment
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation reportsGetAllChartsDataAdmin
     *
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseCombinedReportsData
     */
    public function reportsGetAllChartsDataAdmin($startDate, $endDate, $xChronosheetsAuth, $userIds = null, $forceOnlyThisChart = null)
    {
        list($response) = $this->reportsGetAllChartsDataAdminWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds, $forceOnlyThisChart);
        return $response;
    }

    /**
     * Operation reportsGetAllChartsDataAdminWithHttpInfo
     *
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseCombinedReportsData, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsGetAllChartsDataAdminWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds = null, $forceOnlyThisChart = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseCombinedReportsData';
        $request = $this->reportsGetAllChartsDataAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds, $forceOnlyThisChart);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseCombinedReportsData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsGetAllChartsDataAdminAsync
     *
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetAllChartsDataAdminAsync($startDate, $endDate, $xChronosheetsAuth, $userIds = null, $forceOnlyThisChart = null)
    {
        return $this->reportsGetAllChartsDataAdminAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds, $forceOnlyThisChart)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsGetAllChartsDataAdminAsyncWithHttpInfo
     *
     * Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetAllChartsDataAdminAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds = null, $forceOnlyThisChart = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseCombinedReportsData';
        $request = $this->reportsGetAllChartsDataAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds, $forceOnlyThisChart);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsGetAllChartsDataAdmin'
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $forceOnlyThisChart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsGetAllChartsDataAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds = null, $forceOnlyThisChart = null)
    {
        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling reportsGetAllChartsDataAdmin'
            );
        }
        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling reportsGetAllChartsDataAdmin'
            );
        }
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling reportsGetAllChartsDataAdmin'
            );
        }

        $resourcePath = '/api/Reports/GetAllChartsDataAdmin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startDate !== null) {
            $queryParams['StartDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['EndDate'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($userIds !== null) {
            $queryParams['UserIds'] = ObjectSerializer::toQueryValue($userIds);
        }
        // query params
        if ($forceOnlyThisChart !== null) {
            $queryParams['ForceOnlyThisChart'] = ObjectSerializer::toQueryValue($forceOnlyThisChart);
        }
        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsGetAllChartsDataUser
     *
     * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user's own reports.    Requires the 'ViewOwnReports' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseCombinedReportsData
     */
    public function reportsGetAllChartsDataUser($startDate, $endDate, $xChronosheetsAuth)
    {
        list($response) = $this->reportsGetAllChartsDataUserWithHttpInfo($startDate, $endDate, $xChronosheetsAuth);
        return $response;
    }

    /**
     * Operation reportsGetAllChartsDataUserWithHttpInfo
     *
     * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user's own reports.    Requires the 'ViewOwnReports' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseCombinedReportsData, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsGetAllChartsDataUserWithHttpInfo($startDate, $endDate, $xChronosheetsAuth)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseCombinedReportsData';
        $request = $this->reportsGetAllChartsDataUserRequest($startDate, $endDate, $xChronosheetsAuth);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseCombinedReportsData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsGetAllChartsDataUserAsync
     *
     * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user's own reports.    Requires the 'ViewOwnReports' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetAllChartsDataUserAsync($startDate, $endDate, $xChronosheetsAuth)
    {
        return $this->reportsGetAllChartsDataUserAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsGetAllChartsDataUserAsyncWithHttpInfo
     *
     * Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user's own reports.    Requires the 'ViewOwnReports' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetAllChartsDataUserAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseCombinedReportsData';
        $request = $this->reportsGetAllChartsDataUserRequest($startDate, $endDate, $xChronosheetsAuth);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsGetAllChartsDataUser'
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsGetAllChartsDataUserRequest($startDate, $endDate, $xChronosheetsAuth)
    {
        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling reportsGetAllChartsDataUser'
            );
        }
        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling reportsGetAllChartsDataUser'
            );
        }
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling reportsGetAllChartsDataUser'
            );
        }

        $resourcePath = '/api/Reports/GetAllChartsDataUser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startDate !== null) {
            $queryParams['StartDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['EndDate'] = ObjectSerializer::toQueryValue($endDate);
        }
        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsGetFleetSummaryAdmin
     *
     * Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListFleetSummaryReportItem
     */
    public function reportsGetFleetSummaryAdmin($startDate, $endDate, $xChronosheetsAuth, $userIds = null)
    {
        list($response) = $this->reportsGetFleetSummaryAdminWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds);
        return $response;
    }

    /**
     * Operation reportsGetFleetSummaryAdminWithHttpInfo
     *
     * Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListFleetSummaryReportItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsGetFleetSummaryAdminWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListFleetSummaryReportItem';
        $request = $this->reportsGetFleetSummaryAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListFleetSummaryReportItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsGetFleetSummaryAdminAsync
     *
     * Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetFleetSummaryAdminAsync($startDate, $endDate, $xChronosheetsAuth, $userIds = null)
    {
        return $this->reportsGetFleetSummaryAdminAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsGetFleetSummaryAdminAsyncWithHttpInfo
     *
     * Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetFleetSummaryAdminAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListFleetSummaryReportItem';
        $request = $this->reportsGetFleetSummaryAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsGetFleetSummaryAdmin'
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsGetFleetSummaryAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds = null)
    {
        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling reportsGetFleetSummaryAdmin'
            );
        }
        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling reportsGetFleetSummaryAdmin'
            );
        }
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling reportsGetFleetSummaryAdmin'
            );
        }

        $resourcePath = '/api/Reports/GetFleetSummaryAdmin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startDate !== null) {
            $queryParams['StartDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['EndDate'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($userIds !== null) {
            $queryParams['UserIds'] = ObjectSerializer::toQueryValue($userIds);
        }
        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsGetOrgTripById
     *
     * Get trip by Id, for reporting purposes.    Requires the 'ReportAdmin' permission.
     *
     * @param  int $tripId The ID of the Trip you want to get (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseTrip
     */
    public function reportsGetOrgTripById($tripId, $xChronosheetsAuth)
    {
        list($response) = $this->reportsGetOrgTripByIdWithHttpInfo($tripId, $xChronosheetsAuth);
        return $response;
    }

    /**
     * Operation reportsGetOrgTripByIdWithHttpInfo
     *
     * Get trip by Id, for reporting purposes.    Requires the 'ReportAdmin' permission.
     *
     * @param  int $tripId The ID of the Trip you want to get (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseTrip, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsGetOrgTripByIdWithHttpInfo($tripId, $xChronosheetsAuth)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseTrip';
        $request = $this->reportsGetOrgTripByIdRequest($tripId, $xChronosheetsAuth);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseTrip',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsGetOrgTripByIdAsync
     *
     * Get trip by Id, for reporting purposes.    Requires the 'ReportAdmin' permission.
     *
     * @param  int $tripId The ID of the Trip you want to get (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetOrgTripByIdAsync($tripId, $xChronosheetsAuth)
    {
        return $this->reportsGetOrgTripByIdAsyncWithHttpInfo($tripId, $xChronosheetsAuth)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsGetOrgTripByIdAsyncWithHttpInfo
     *
     * Get trip by Id, for reporting purposes.    Requires the 'ReportAdmin' permission.
     *
     * @param  int $tripId The ID of the Trip you want to get (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetOrgTripByIdAsyncWithHttpInfo($tripId, $xChronosheetsAuth)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseTrip';
        $request = $this->reportsGetOrgTripByIdRequest($tripId, $xChronosheetsAuth);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsGetOrgTripById'
     *
     * @param  int $tripId The ID of the Trip you want to get (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsGetOrgTripByIdRequest($tripId, $xChronosheetsAuth)
    {
        // verify the required parameter 'tripId' is set
        if ($tripId === null || (is_array($tripId) && count($tripId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tripId when calling reportsGetOrgTripById'
            );
        }
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling reportsGetOrgTripById'
            );
        }

        $resourcePath = '/api/Reports/GetOrgTripById';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tripId !== null) {
            $queryParams['TripId'] = ObjectSerializer::toQueryValue($tripId);
        }
        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsGetOrganisationTimesheetFileAttachments
     *
     * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment
     */
    public function reportsGetOrganisationTimesheetFileAttachments($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null)
    {
        list($response) = $this->reportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds);
        return $response;
    }

    /**
     * Operation reportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo
     *
     * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsGetOrganisationTimesheetFileAttachmentsWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment';
        $request = $this->reportsGetOrganisationTimesheetFileAttachmentsRequest($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsGetOrganisationTimesheetFileAttachmentsAsync
     *
     * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetOrganisationTimesheetFileAttachmentsAsync($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null)
    {
        return $this->reportsGetOrganisationTimesheetFileAttachmentsAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsGetOrganisationTimesheetFileAttachmentsAsyncWithHttpInfo
     *
     * Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetOrganisationTimesheetFileAttachmentsAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment';
        $request = $this->reportsGetOrganisationTimesheetFileAttachmentsRequest($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsGetOrganisationTimesheetFileAttachments'
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsGetOrganisationTimesheetFileAttachmentsRequest($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null)
    {
        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling reportsGetOrganisationTimesheetFileAttachments'
            );
        }
        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling reportsGetOrganisationTimesheetFileAttachments'
            );
        }
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling reportsGetOrganisationTimesheetFileAttachments'
            );
        }

        $resourcePath = '/api/Reports/GetOrganisationTimesheetFileAttachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startDate !== null) {
            $queryParams['StartDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['EndDate'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($userIds !== null) {
            $queryParams['UserIds'] = ObjectSerializer::toQueryValue($userIds);
        }
        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsGetOrganisationTranscripts
     *
     * Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $keywords Search the transcripts by keyword(s) (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTranscript
     */
    public function reportsGetOrganisationTranscripts($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null, $keywords = null)
    {
        list($response) = $this->reportsGetOrganisationTranscriptsWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds, $keywords);
        return $response;
    }

    /**
     * Operation reportsGetOrganisationTranscriptsWithHttpInfo
     *
     * Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $keywords Search the transcripts by keyword(s) (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTranscript, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsGetOrganisationTranscriptsWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null, $keywords = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTranscript';
        $request = $this->reportsGetOrganisationTranscriptsRequest($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds, $keywords);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTranscript',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsGetOrganisationTranscriptsAsync
     *
     * Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $keywords Search the transcripts by keyword(s) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetOrganisationTranscriptsAsync($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null, $keywords = null)
    {
        return $this->reportsGetOrganisationTranscriptsAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds, $keywords)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsGetOrganisationTranscriptsAsyncWithHttpInfo
     *
     * Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $keywords Search the transcripts by keyword(s) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetOrganisationTranscriptsAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null, $keywords = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTranscript';
        $request = $this->reportsGetOrganisationTranscriptsRequest($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds, $keywords);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsGetOrganisationTranscripts'
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $keywords Search the transcripts by keyword(s) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsGetOrganisationTranscriptsRequest($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null, $keywords = null)
    {
        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling reportsGetOrganisationTranscripts'
            );
        }
        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling reportsGetOrganisationTranscripts'
            );
        }
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling reportsGetOrganisationTranscripts'
            );
        }

        $resourcePath = '/api/Reports/GetOrganisationTranscripts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startDate !== null) {
            $queryParams['StartDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['EndDate'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($userIds !== null) {
            $queryParams['UserIds'] = ObjectSerializer::toQueryValue($userIds);
        }
        // query params
        if ($keywords !== null) {
            $queryParams['Keywords'] = ObjectSerializer::toQueryValue($keywords);
        }
        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsGetOrganisationTrips
     *
     * Reports on Organisation trips (GPS tracking from whole organisation).    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTrip
     */
    public function reportsGetOrganisationTrips($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null)
    {
        list($response) = $this->reportsGetOrganisationTripsWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds);
        return $response;
    }

    /**
     * Operation reportsGetOrganisationTripsWithHttpInfo
     *
     * Reports on Organisation trips (GPS tracking from whole organisation).    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTrip, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsGetOrganisationTripsWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTrip';
        $request = $this->reportsGetOrganisationTripsRequest($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTrip',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsGetOrganisationTripsAsync
     *
     * Reports on Organisation trips (GPS tracking from whole organisation).    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetOrganisationTripsAsync($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null)
    {
        return $this->reportsGetOrganisationTripsAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsGetOrganisationTripsAsyncWithHttpInfo
     *
     * Reports on Organisation trips (GPS tracking from whole organisation).    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetOrganisationTripsAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListOrgReportTrip';
        $request = $this->reportsGetOrganisationTripsRequest($startDate, $endDate, $xChronosheetsAuth, $skip, $take, $userIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsGetOrganisationTrips'
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many items (optional)
     * @param  int $take Take this many items (optional)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsGetOrganisationTripsRequest($startDate, $endDate, $xChronosheetsAuth, $skip = null, $take = null, $userIds = null)
    {
        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling reportsGetOrganisationTrips'
            );
        }
        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling reportsGetOrganisationTrips'
            );
        }
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling reportsGetOrganisationTrips'
            );
        }

        $resourcePath = '/api/Reports/GetOrganisationTrips';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startDate !== null) {
            $queryParams['StartDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['EndDate'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($userIds !== null) {
            $queryParams['UserIds'] = ObjectSerializer::toQueryValue($userIds);
        }
        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsGetRawDataAdmin
     *
     * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $sort Decide which column to sort on (optional)
     * @param  string $order Decide which direction to sort the column (optional)
     * @param  int $skip Skip this many rows (optional)
     * @param  int $take Take this many rows (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListRawReportItem
     */
    public function reportsGetRawDataAdmin($startDate, $endDate, $xChronosheetsAuth, $userIds = null, $sort = null, $order = null, $skip = null, $take = null)
    {
        list($response) = $this->reportsGetRawDataAdminWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds, $sort, $order, $skip, $take);
        return $response;
    }

    /**
     * Operation reportsGetRawDataAdminWithHttpInfo
     *
     * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $sort Decide which column to sort on (optional)
     * @param  string $order Decide which direction to sort the column (optional)
     * @param  int $skip Skip this many rows (optional)
     * @param  int $take Take this many rows (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListRawReportItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsGetRawDataAdminWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds = null, $sort = null, $order = null, $skip = null, $take = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListRawReportItem';
        $request = $this->reportsGetRawDataAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds, $sort, $order, $skip, $take);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListRawReportItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsGetRawDataAdminAsync
     *
     * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $sort Decide which column to sort on (optional)
     * @param  string $order Decide which direction to sort the column (optional)
     * @param  int $skip Skip this many rows (optional)
     * @param  int $take Take this many rows (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetRawDataAdminAsync($startDate, $endDate, $xChronosheetsAuth, $userIds = null, $sort = null, $order = null, $skip = null, $take = null)
    {
        return $this->reportsGetRawDataAdminAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds, $sort, $order, $skip, $take)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsGetRawDataAdminAsyncWithHttpInfo
     *
     * Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $sort Decide which column to sort on (optional)
     * @param  string $order Decide which direction to sort the column (optional)
     * @param  int $skip Skip this many rows (optional)
     * @param  int $take Take this many rows (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetRawDataAdminAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds = null, $sort = null, $order = null, $skip = null, $take = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseForPaginatedListRawReportItem';
        $request = $this->reportsGetRawDataAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds, $sort, $order, $skip, $take);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsGetRawDataAdmin'
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     * @param  string $sort Decide which column to sort on (optional)
     * @param  string $order Decide which direction to sort the column (optional)
     * @param  int $skip Skip this many rows (optional)
     * @param  int $take Take this many rows (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsGetRawDataAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds = null, $sort = null, $order = null, $skip = null, $take = null)
    {
        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling reportsGetRawDataAdmin'
            );
        }
        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling reportsGetRawDataAdmin'
            );
        }
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling reportsGetRawDataAdmin'
            );
        }

        $resourcePath = '/api/Reports/GetRawDataAdmin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startDate !== null) {
            $queryParams['StartDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['EndDate'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($userIds !== null) {
            $queryParams['UserIds'] = ObjectSerializer::toQueryValue($userIds);
        }
        // query params
        if ($sort !== null) {
            $queryParams['Sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['Order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsProjectCostingsAdmin
     *
     * Gets project cost estimations VS actual cost for date range and users.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListProjectCostingReportItem
     */
    public function reportsProjectCostingsAdmin($startDate, $endDate, $xChronosheetsAuth, $userIds = null)
    {
        list($response) = $this->reportsProjectCostingsAdminWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds);
        return $response;
    }

    /**
     * Operation reportsProjectCostingsAdminWithHttpInfo
     *
     * Gets project cost estimations VS actual cost for date range and users.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListProjectCostingReportItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsProjectCostingsAdminWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListProjectCostingReportItem';
        $request = $this->reportsProjectCostingsAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListProjectCostingReportItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsProjectCostingsAdminAsync
     *
     * Gets project cost estimations VS actual cost for date range and users.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsProjectCostingsAdminAsync($startDate, $endDate, $xChronosheetsAuth, $userIds = null)
    {
        return $this->reportsProjectCostingsAdminAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsProjectCostingsAdminAsyncWithHttpInfo
     *
     * Gets project cost estimations VS actual cost for date range and users.    Requires the 'ReportAdmin' permission.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsProjectCostingsAdminAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth, $userIds = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListProjectCostingReportItem';
        $request = $this->reportsProjectCostingsAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsProjectCostingsAdmin'
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  string $userIds A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsProjectCostingsAdminRequest($startDate, $endDate, $xChronosheetsAuth, $userIds = null)
    {
        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling reportsProjectCostingsAdmin'
            );
        }
        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling reportsProjectCostingsAdmin'
            );
        }
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling reportsProjectCostingsAdmin'
            );
        }

        $resourcePath = '/api/Reports/ProjectCostingsAdmin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startDate !== null) {
            $queryParams['StartDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['EndDate'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($userIds !== null) {
            $queryParams['UserIds'] = ObjectSerializer::toQueryValue($userIds);
        }
        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsUserJobsOverTime
     *
     * Timeseries jobs data for the logged in user.    Requires the 'ViewOwnReports' or 'SubmitTimesheets'.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListJobSeriesReportItem
     */
    public function reportsUserJobsOverTime($startDate, $endDate, $xChronosheetsAuth)
    {
        list($response) = $this->reportsUserJobsOverTimeWithHttpInfo($startDate, $endDate, $xChronosheetsAuth);
        return $response;
    }

    /**
     * Operation reportsUserJobsOverTimeWithHttpInfo
     *
     * Timeseries jobs data for the logged in user.    Requires the 'ViewOwnReports' or 'SubmitTimesheets'.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListJobSeriesReportItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsUserJobsOverTimeWithHttpInfo($startDate, $endDate, $xChronosheetsAuth)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListJobSeriesReportItem';
        $request = $this->reportsUserJobsOverTimeRequest($startDate, $endDate, $xChronosheetsAuth);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListJobSeriesReportItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsUserJobsOverTimeAsync
     *
     * Timeseries jobs data for the logged in user.    Requires the 'ViewOwnReports' or 'SubmitTimesheets'.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsUserJobsOverTimeAsync($startDate, $endDate, $xChronosheetsAuth)
    {
        return $this->reportsUserJobsOverTimeAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsUserJobsOverTimeAsyncWithHttpInfo
     *
     * Timeseries jobs data for the logged in user.    Requires the 'ViewOwnReports' or 'SubmitTimesheets'.
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsUserJobsOverTimeAsyncWithHttpInfo($startDate, $endDate, $xChronosheetsAuth)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSApiResponseListJobSeriesReportItem';
        $request = $this->reportsUserJobsOverTimeRequest($startDate, $endDate, $xChronosheetsAuth);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsUserJobsOverTime'
     *
     * @param  \DateTime $startDate The start date for the date range.  Report data in the response is after this date (required)
     * @param  \DateTime $endDate The end date for the date range.  Report data in the response is before this date (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsUserJobsOverTimeRequest($startDate, $endDate, $xChronosheetsAuth)
    {
        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling reportsUserJobsOverTime'
            );
        }
        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling reportsUserJobsOverTime'
            );
        }
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling reportsUserJobsOverTime'
            );
        }

        $resourcePath = '/api/Reports/UserJobsOverTime';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startDate !== null) {
            $queryParams['StartDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['EndDate'] = ObjectSerializer::toQueryValue($endDate);
        }
        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
