<?php
/**
 * TimesheetAutomationApi
 * PHP version 5
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ChronoSheetsClient\ApiException;
use ChronoSheetsClient\Configuration;
use ChronoSheetsClient\HeaderSelector;
use ChronoSheetsClient\ObjectSerializer;

/**
 * TimesheetAutomationApi Class Doc Comment
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TimesheetAutomationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation timesheetAutomationCreateAutomationStep
     *
     * Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the 'SubmitTimesheets' permission.
     *
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  \ChronoSheetsClient\ChronoSheetsClientLibModel\CreateAutomationStepRequest $request request (required)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseInt32
     */
    public function timesheetAutomationCreateAutomationStep($xChronosheetsAuth, $request)
    {
        list($response) = $this->timesheetAutomationCreateAutomationStepWithHttpInfo($xChronosheetsAuth, $request);
        return $response;
    }

    /**
     * Operation timesheetAutomationCreateAutomationStepWithHttpInfo
     *
     * Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the 'SubmitTimesheets' permission.
     *
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  \ChronoSheetsClient\ChronoSheetsClientLibModel\CreateAutomationStepRequest $request (required)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseInt32, HTTP status code, HTTP response headers (array of strings)
     */
    public function timesheetAutomationCreateAutomationStepWithHttpInfo($xChronosheetsAuth, $request)
    {
        $request = $this->timesheetAutomationCreateAutomationStepRequest($xChronosheetsAuth, $request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseInt32' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseInt32', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseInt32';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseInt32',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timesheetAutomationCreateAutomationStepAsync
     *
     * Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the 'SubmitTimesheets' permission.
     *
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  \ChronoSheetsClient\ChronoSheetsClientLibModel\CreateAutomationStepRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timesheetAutomationCreateAutomationStepAsync($xChronosheetsAuth, $request)
    {
        return $this->timesheetAutomationCreateAutomationStepAsyncWithHttpInfo($xChronosheetsAuth, $request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timesheetAutomationCreateAutomationStepAsyncWithHttpInfo
     *
     * Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the 'SubmitTimesheets' permission.
     *
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  \ChronoSheetsClient\ChronoSheetsClientLibModel\CreateAutomationStepRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timesheetAutomationCreateAutomationStepAsyncWithHttpInfo($xChronosheetsAuth, $request)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseInt32';
        $request = $this->timesheetAutomationCreateAutomationStepRequest($xChronosheetsAuth, $request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timesheetAutomationCreateAutomationStep'
     *
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  \ChronoSheetsClient\ChronoSheetsClientLibModel\CreateAutomationStepRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function timesheetAutomationCreateAutomationStepRequest($xChronosheetsAuth, $request)
    {
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling timesheetAutomationCreateAutomationStep'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling timesheetAutomationCreateAutomationStep'
            );
        }

        $resourcePath = '/TimesheetAutomation/CreateAutomationStep';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timesheetAutomationGetTimesheetAutomationAuditTrail
     *
     * Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the 'ManageGeofencing' permission.
     *
     * @param  int $geofenceId The ID of the Geofence (required)
     * @param  int $userId userId (required)
     * @param  string $sort sort (required)
     * @param  string $order order (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many records (optional)
     * @param  int $take Take this many records (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence
     */
    public function timesheetAutomationGetTimesheetAutomationAuditTrail($geofenceId, $userId, $sort, $order, $xChronosheetsAuth, $skip = null, $take = null)
    {
        list($response) = $this->timesheetAutomationGetTimesheetAutomationAuditTrailWithHttpInfo($geofenceId, $userId, $sort, $order, $xChronosheetsAuth, $skip, $take);
        return $response;
    }

    /**
     * Operation timesheetAutomationGetTimesheetAutomationAuditTrailWithHttpInfo
     *
     * Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the 'ManageGeofencing' permission.
     *
     * @param  int $geofenceId The ID of the Geofence (required)
     * @param  int $userId (required)
     * @param  string $sort (required)
     * @param  string $order (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many records (optional)
     * @param  int $take Take this many records (optional)
     *
     * @throws \ChronoSheetsClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence, HTTP status code, HTTP response headers (array of strings)
     */
    public function timesheetAutomationGetTimesheetAutomationAuditTrailWithHttpInfo($geofenceId, $userId, $sort, $order, $xChronosheetsAuth, $skip = null, $take = null)
    {
        $request = $this->timesheetAutomationGetTimesheetAutomationAuditTrailRequest($geofenceId, $userId, $sort, $order, $xChronosheetsAuth, $skip, $take);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timesheetAutomationGetTimesheetAutomationAuditTrailAsync
     *
     * Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the 'ManageGeofencing' permission.
     *
     * @param  int $geofenceId The ID of the Geofence (required)
     * @param  int $userId (required)
     * @param  string $sort (required)
     * @param  string $order (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many records (optional)
     * @param  int $take Take this many records (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timesheetAutomationGetTimesheetAutomationAuditTrailAsync($geofenceId, $userId, $sort, $order, $xChronosheetsAuth, $skip = null, $take = null)
    {
        return $this->timesheetAutomationGetTimesheetAutomationAuditTrailAsyncWithHttpInfo($geofenceId, $userId, $sort, $order, $xChronosheetsAuth, $skip, $take)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timesheetAutomationGetTimesheetAutomationAuditTrailAsyncWithHttpInfo
     *
     * Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the 'ManageGeofencing' permission.
     *
     * @param  int $geofenceId The ID of the Geofence (required)
     * @param  int $userId (required)
     * @param  string $sort (required)
     * @param  string $order (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many records (optional)
     * @param  int $take Take this many records (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timesheetAutomationGetTimesheetAutomationAuditTrailAsyncWithHttpInfo($geofenceId, $userId, $sort, $order, $xChronosheetsAuth, $skip = null, $take = null)
    {
        $returnType = '\ChronoSheetsClient\ChronoSheetsClientLibModel\ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence';
        $request = $this->timesheetAutomationGetTimesheetAutomationAuditTrailRequest($geofenceId, $userId, $sort, $order, $xChronosheetsAuth, $skip, $take);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timesheetAutomationGetTimesheetAutomationAuditTrail'
     *
     * @param  int $geofenceId The ID of the Geofence (required)
     * @param  int $userId (required)
     * @param  string $sort (required)
     * @param  string $order (required)
     * @param  string $xChronosheetsAuth The ChronoSheets Auth Token (required)
     * @param  int $skip Skip this many records (optional)
     * @param  int $take Take this many records (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function timesheetAutomationGetTimesheetAutomationAuditTrailRequest($geofenceId, $userId, $sort, $order, $xChronosheetsAuth, $skip = null, $take = null)
    {
        // verify the required parameter 'geofenceId' is set
        if ($geofenceId === null || (is_array($geofenceId) && count($geofenceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $geofenceId when calling timesheetAutomationGetTimesheetAutomationAuditTrail'
            );
        }
        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling timesheetAutomationGetTimesheetAutomationAuditTrail'
            );
        }
        // verify the required parameter 'sort' is set
        if ($sort === null || (is_array($sort) && count($sort) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort when calling timesheetAutomationGetTimesheetAutomationAuditTrail'
            );
        }
        // verify the required parameter 'order' is set
        if ($order === null || (is_array($order) && count($order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order when calling timesheetAutomationGetTimesheetAutomationAuditTrail'
            );
        }
        // verify the required parameter 'xChronosheetsAuth' is set
        if ($xChronosheetsAuth === null || (is_array($xChronosheetsAuth) && count($xChronosheetsAuth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xChronosheetsAuth when calling timesheetAutomationGetTimesheetAutomationAuditTrail'
            );
        }

        $resourcePath = '/TimesheetAutomation/GetTimesheetAutomationAuditTrail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($geofenceId)) {
            $geofenceId = ObjectSerializer::serializeCollection($geofenceId, '', true);
        }
        if ($geofenceId !== null) {
            $queryParams['GeofenceId'] = $geofenceId;
        }
        // query params
        if (is_array($userId)) {
            $userId = ObjectSerializer::serializeCollection($userId, '', true);
        }
        if ($userId !== null) {
            $queryParams['UserId'] = $userId;
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, '', true);
        }
        if ($sort !== null) {
            $queryParams['Sort'] = $sort;
        }
        // query params
        if (is_array($order)) {
            $order = ObjectSerializer::serializeCollection($order, '', true);
        }
        if ($order !== null) {
            $queryParams['Order'] = $order;
        }
        // query params
        if (is_array($skip)) {
            $skip = ObjectSerializer::serializeCollection($skip, '', true);
        }
        if ($skip !== null) {
            $queryParams['Skip'] = $skip;
        }
        // query params
        if (is_array($take)) {
            $take = ObjectSerializer::serializeCollection($take, '', true);
        }
        if ($take !== null) {
            $queryParams['Take'] = $take;
        }

        // header params
        if ($xChronosheetsAuth !== null) {
            $headerParams['x-chronosheets-auth'] = ObjectSerializer::toHeaderValue($xChronosheetsAuth);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
