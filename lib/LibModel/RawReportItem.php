<?php
/**
 * RawReportItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibModel;

use \ArrayAccess;
use \ChronoSheetsClient\ObjectSerializer;

/**
 * RawReportItem Class Doc Comment
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RawReportItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RawReportItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'organisationId' => 'int',
        'userId' => 'int',
        'username' => 'string',
        'emailAddress' => 'string',
        'jobCode' => 'string',
        'taskName' => 'string',
        'clientName' => 'string',
        'projectName' => 'string',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'spanSeconds' => 'int',
        'description' => 'string',
        'payAmount' => 'double',
        'payOvertimeAmount' => 'double',
        'tripCost' => 'double',
        'tripDistanceMeters' => 'double',
        'spanSecondsNormalTime' => 'int',
        'spanSecondsOvertime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'organisationId' => 'int32',
        'userId' => 'int32',
        'username' => null,
        'emailAddress' => null,
        'jobCode' => null,
        'taskName' => null,
        'clientName' => null,
        'projectName' => null,
        'startDate' => 'date-time',
        'endDate' => 'date-time',
        'spanSeconds' => 'int32',
        'description' => null,
        'payAmount' => 'double',
        'payOvertimeAmount' => 'double',
        'tripCost' => 'double',
        'tripDistanceMeters' => 'double',
        'spanSecondsNormalTime' => 'int32',
        'spanSecondsOvertime' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organisationId' => 'OrganisationId',
        'userId' => 'UserId',
        'username' => 'Username',
        'emailAddress' => 'EmailAddress',
        'jobCode' => 'JobCode',
        'taskName' => 'TaskName',
        'clientName' => 'ClientName',
        'projectName' => 'ProjectName',
        'startDate' => 'StartDate',
        'endDate' => 'EndDate',
        'spanSeconds' => 'SpanSeconds',
        'description' => 'Description',
        'payAmount' => 'PayAmount',
        'payOvertimeAmount' => 'PayOvertimeAmount',
        'tripCost' => 'TripCost',
        'tripDistanceMeters' => 'TripDistanceMeters',
        'spanSecondsNormalTime' => 'SpanSecondsNormalTime',
        'spanSecondsOvertime' => 'SpanSecondsOvertime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organisationId' => 'setOrganisationId',
        'userId' => 'setUserId',
        'username' => 'setUsername',
        'emailAddress' => 'setEmailAddress',
        'jobCode' => 'setJobCode',
        'taskName' => 'setTaskName',
        'clientName' => 'setClientName',
        'projectName' => 'setProjectName',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'spanSeconds' => 'setSpanSeconds',
        'description' => 'setDescription',
        'payAmount' => 'setPayAmount',
        'payOvertimeAmount' => 'setPayOvertimeAmount',
        'tripCost' => 'setTripCost',
        'tripDistanceMeters' => 'setTripDistanceMeters',
        'spanSecondsNormalTime' => 'setSpanSecondsNormalTime',
        'spanSecondsOvertime' => 'setSpanSecondsOvertime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organisationId' => 'getOrganisationId',
        'userId' => 'getUserId',
        'username' => 'getUsername',
        'emailAddress' => 'getEmailAddress',
        'jobCode' => 'getJobCode',
        'taskName' => 'getTaskName',
        'clientName' => 'getClientName',
        'projectName' => 'getProjectName',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'spanSeconds' => 'getSpanSeconds',
        'description' => 'getDescription',
        'payAmount' => 'getPayAmount',
        'payOvertimeAmount' => 'getPayOvertimeAmount',
        'tripCost' => 'getTripCost',
        'tripDistanceMeters' => 'getTripDistanceMeters',
        'spanSecondsNormalTime' => 'getSpanSecondsNormalTime',
        'spanSecondsOvertime' => 'getSpanSecondsOvertime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organisationId'] = isset($data['organisationId']) ? $data['organisationId'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['emailAddress'] = isset($data['emailAddress']) ? $data['emailAddress'] : null;
        $this->container['jobCode'] = isset($data['jobCode']) ? $data['jobCode'] : null;
        $this->container['taskName'] = isset($data['taskName']) ? $data['taskName'] : null;
        $this->container['clientName'] = isset($data['clientName']) ? $data['clientName'] : null;
        $this->container['projectName'] = isset($data['projectName']) ? $data['projectName'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['spanSeconds'] = isset($data['spanSeconds']) ? $data['spanSeconds'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['payAmount'] = isset($data['payAmount']) ? $data['payAmount'] : null;
        $this->container['payOvertimeAmount'] = isset($data['payOvertimeAmount']) ? $data['payOvertimeAmount'] : null;
        $this->container['tripCost'] = isset($data['tripCost']) ? $data['tripCost'] : null;
        $this->container['tripDistanceMeters'] = isset($data['tripDistanceMeters']) ? $data['tripDistanceMeters'] : null;
        $this->container['spanSecondsNormalTime'] = isset($data['spanSecondsNormalTime']) ? $data['spanSecondsNormalTime'] : null;
        $this->container['spanSecondsOvertime'] = isset($data['spanSecondsOvertime']) ? $data['spanSecondsOvertime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organisationId
     *
     * @return int|null
     */
    public function getOrganisationId()
    {
        return $this->container['organisationId'];
    }

    /**
     * Sets organisationId
     *
     * @param int|null $organisationId organisationId
     *
     * @return $this
     */
    public function setOrganisationId($organisationId)
    {
        $this->container['organisationId'] = $organisationId;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int|null $userId userId
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['emailAddress'];
    }

    /**
     * Sets emailAddress
     *
     * @param string|null $emailAddress emailAddress
     *
     * @return $this
     */
    public function setEmailAddress($emailAddress)
    {
        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }

    /**
     * Gets jobCode
     *
     * @return string|null
     */
    public function getJobCode()
    {
        return $this->container['jobCode'];
    }

    /**
     * Sets jobCode
     *
     * @param string|null $jobCode jobCode
     *
     * @return $this
     */
    public function setJobCode($jobCode)
    {
        $this->container['jobCode'] = $jobCode;

        return $this;
    }

    /**
     * Gets taskName
     *
     * @return string|null
     */
    public function getTaskName()
    {
        return $this->container['taskName'];
    }

    /**
     * Sets taskName
     *
     * @param string|null $taskName taskName
     *
     * @return $this
     */
    public function setTaskName($taskName)
    {
        $this->container['taskName'] = $taskName;

        return $this;
    }

    /**
     * Gets clientName
     *
     * @return string|null
     */
    public function getClientName()
    {
        return $this->container['clientName'];
    }

    /**
     * Sets clientName
     *
     * @param string|null $clientName clientName
     *
     * @return $this
     */
    public function setClientName($clientName)
    {
        $this->container['clientName'] = $clientName;

        return $this;
    }

    /**
     * Gets projectName
     *
     * @return string|null
     */
    public function getProjectName()
    {
        return $this->container['projectName'];
    }

    /**
     * Sets projectName
     *
     * @param string|null $projectName projectName
     *
     * @return $this
     */
    public function setProjectName($projectName)
    {
        $this->container['projectName'] = $projectName;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate startDate
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate endDate
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets spanSeconds
     *
     * @return int|null
     */
    public function getSpanSeconds()
    {
        return $this->container['spanSeconds'];
    }

    /**
     * Sets spanSeconds
     *
     * @param int|null $spanSeconds spanSeconds
     *
     * @return $this
     */
    public function setSpanSeconds($spanSeconds)
    {
        $this->container['spanSeconds'] = $spanSeconds;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets payAmount
     *
     * @return double|null
     */
    public function getPayAmount()
    {
        return $this->container['payAmount'];
    }

    /**
     * Sets payAmount
     *
     * @param double|null $payAmount payAmount
     *
     * @return $this
     */
    public function setPayAmount($payAmount)
    {
        $this->container['payAmount'] = $payAmount;

        return $this;
    }

    /**
     * Gets payOvertimeAmount
     *
     * @return double|null
     */
    public function getPayOvertimeAmount()
    {
        return $this->container['payOvertimeAmount'];
    }

    /**
     * Sets payOvertimeAmount
     *
     * @param double|null $payOvertimeAmount payOvertimeAmount
     *
     * @return $this
     */
    public function setPayOvertimeAmount($payOvertimeAmount)
    {
        $this->container['payOvertimeAmount'] = $payOvertimeAmount;

        return $this;
    }

    /**
     * Gets tripCost
     *
     * @return double|null
     */
    public function getTripCost()
    {
        return $this->container['tripCost'];
    }

    /**
     * Sets tripCost
     *
     * @param double|null $tripCost tripCost
     *
     * @return $this
     */
    public function setTripCost($tripCost)
    {
        $this->container['tripCost'] = $tripCost;

        return $this;
    }

    /**
     * Gets tripDistanceMeters
     *
     * @return double|null
     */
    public function getTripDistanceMeters()
    {
        return $this->container['tripDistanceMeters'];
    }

    /**
     * Sets tripDistanceMeters
     *
     * @param double|null $tripDistanceMeters tripDistanceMeters
     *
     * @return $this
     */
    public function setTripDistanceMeters($tripDistanceMeters)
    {
        $this->container['tripDistanceMeters'] = $tripDistanceMeters;

        return $this;
    }

    /**
     * Gets spanSecondsNormalTime
     *
     * @return int|null
     */
    public function getSpanSecondsNormalTime()
    {
        return $this->container['spanSecondsNormalTime'];
    }

    /**
     * Sets spanSecondsNormalTime
     *
     * @param int|null $spanSecondsNormalTime spanSecondsNormalTime
     *
     * @return $this
     */
    public function setSpanSecondsNormalTime($spanSecondsNormalTime)
    {
        $this->container['spanSecondsNormalTime'] = $spanSecondsNormalTime;

        return $this;
    }

    /**
     * Gets spanSecondsOvertime
     *
     * @return int|null
     */
    public function getSpanSecondsOvertime()
    {
        return $this->container['spanSecondsOvertime'];
    }

    /**
     * Sets spanSecondsOvertime
     *
     * @param int|null $spanSecondsOvertime spanSecondsOvertime
     *
     * @return $this
     */
    public function setSpanSecondsOvertime($spanSecondsOvertime)
    {
        $this->container['spanSecondsOvertime'] = $spanSecondsOvertime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


