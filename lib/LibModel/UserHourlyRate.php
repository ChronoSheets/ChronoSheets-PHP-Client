<?php
/**
 * UserHourlyRate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibModel;

use \ArrayAccess;
use \ChronoSheetsClient\ObjectSerializer;

/**
 * UserHourlyRate Class Doc Comment
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class UserHourlyRate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserHourlyRate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rateId' => 'int',
        'userId' => 'int',
        'organisationId' => 'int',
        'isCurrent' => 'bool',
        'hourlyRate' => 'double',
        'hourlyOvertimeRate' => 'double',
        'startDateTime' => '\DateTime',
        'endDateTime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'rateId' => 'int32',
        'userId' => 'int32',
        'organisationId' => 'int32',
        'isCurrent' => null,
        'hourlyRate' => 'double',
        'hourlyOvertimeRate' => 'double',
        'startDateTime' => 'date-time',
        'endDateTime' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rateId' => 'RateId',
        'userId' => 'UserId',
        'organisationId' => 'OrganisationId',
        'isCurrent' => 'IsCurrent',
        'hourlyRate' => 'HourlyRate',
        'hourlyOvertimeRate' => 'HourlyOvertimeRate',
        'startDateTime' => 'StartDateTime',
        'endDateTime' => 'EndDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rateId' => 'setRateId',
        'userId' => 'setUserId',
        'organisationId' => 'setOrganisationId',
        'isCurrent' => 'setIsCurrent',
        'hourlyRate' => 'setHourlyRate',
        'hourlyOvertimeRate' => 'setHourlyOvertimeRate',
        'startDateTime' => 'setStartDateTime',
        'endDateTime' => 'setEndDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rateId' => 'getRateId',
        'userId' => 'getUserId',
        'organisationId' => 'getOrganisationId',
        'isCurrent' => 'getIsCurrent',
        'hourlyRate' => 'getHourlyRate',
        'hourlyOvertimeRate' => 'getHourlyOvertimeRate',
        'startDateTime' => 'getStartDateTime',
        'endDateTime' => 'getEndDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rateId'] = $data['rateId'] ?? null;
        $this->container['userId'] = $data['userId'] ?? null;
        $this->container['organisationId'] = $data['organisationId'] ?? null;
        $this->container['isCurrent'] = $data['isCurrent'] ?? null;
        $this->container['hourlyRate'] = $data['hourlyRate'] ?? null;
        $this->container['hourlyOvertimeRate'] = $data['hourlyOvertimeRate'] ?? null;
        $this->container['startDateTime'] = $data['startDateTime'] ?? null;
        $this->container['endDateTime'] = $data['endDateTime'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rateId
     *
     * @return int|null
     */
    public function getRateId()
    {
        return $this->container['rateId'];
    }

    /**
     * Sets rateId
     *
     * @param int|null $rateId rateId
     *
     * @return self
     */
    public function setRateId($rateId)
    {
        $this->container['rateId'] = $rateId;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int|null $userId userId
     *
     * @return self
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets organisationId
     *
     * @return int|null
     */
    public function getOrganisationId()
    {
        return $this->container['organisationId'];
    }

    /**
     * Sets organisationId
     *
     * @param int|null $organisationId organisationId
     *
     * @return self
     */
    public function setOrganisationId($organisationId)
    {
        $this->container['organisationId'] = $organisationId;

        return $this;
    }

    /**
     * Gets isCurrent
     *
     * @return bool|null
     */
    public function getIsCurrent()
    {
        return $this->container['isCurrent'];
    }

    /**
     * Sets isCurrent
     *
     * @param bool|null $isCurrent isCurrent
     *
     * @return self
     */
    public function setIsCurrent($isCurrent)
    {
        $this->container['isCurrent'] = $isCurrent;

        return $this;
    }

    /**
     * Gets hourlyRate
     *
     * @return double|null
     */
    public function getHourlyRate()
    {
        return $this->container['hourlyRate'];
    }

    /**
     * Sets hourlyRate
     *
     * @param double|null $hourlyRate hourlyRate
     *
     * @return self
     */
    public function setHourlyRate($hourlyRate)
    {
        $this->container['hourlyRate'] = $hourlyRate;

        return $this;
    }

    /**
     * Gets hourlyOvertimeRate
     *
     * @return double|null
     */
    public function getHourlyOvertimeRate()
    {
        return $this->container['hourlyOvertimeRate'];
    }

    /**
     * Sets hourlyOvertimeRate
     *
     * @param double|null $hourlyOvertimeRate hourlyOvertimeRate
     *
     * @return self
     */
    public function setHourlyOvertimeRate($hourlyOvertimeRate)
    {
        $this->container['hourlyOvertimeRate'] = $hourlyOvertimeRate;

        return $this;
    }

    /**
     * Gets startDateTime
     *
     * @return \DateTime|null
     */
    public function getStartDateTime()
    {
        return $this->container['startDateTime'];
    }

    /**
     * Sets startDateTime
     *
     * @param \DateTime|null $startDateTime startDateTime
     *
     * @return self
     */
    public function setStartDateTime($startDateTime)
    {
        $this->container['startDateTime'] = $startDateTime;

        return $this;
    }

    /**
     * Gets endDateTime
     *
     * @return \DateTime|null
     */
    public function getEndDateTime()
    {
        return $this->container['endDateTime'];
    }

    /**
     * Sets endDateTime
     *
     * @param \DateTime|null $endDateTime endDateTime
     *
     * @return self
     */
    public function setEndDateTime($endDateTime)
    {
        $this->container['endDateTime'] = $endDateTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


