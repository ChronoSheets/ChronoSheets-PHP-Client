<?php
/**
 * CSCombinedReportsData
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChronoSheets API
 *
 * ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.
 *
 * OpenAPI spec version: v1
 * Contact: lachlan@chronosheets.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibModel;

use \ArrayAccess;
use \ChronoSheetsClient\ObjectSerializer;

/**
 * CSCombinedReportsData Class Doc Comment
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CSCombinedReportsData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CombinedReportsData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'seriesJobCodes' => '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSJobSeriesReportItem[]',
        'seriesTasks' => '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSTaskSeriesReportItem[]',
        'seriesClients' => '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSClientSeriesReportItem[]',
        'seriesProjects' => '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSProjectSeriesReportItem[]',
        'totalsJobCodes' => '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSJobTotalsReportItem[]',
        'totalsTasks' => '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSTaskTotalsReportItem[]',
        'totalsClients' => '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSClientTotalsReportItem[]',
        'totalsProjects' => '\ChronoSheetsClient\ChronoSheetsClientLibModel\CSProjectTotalsReportItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'seriesJobCodes' => null,
        'seriesTasks' => null,
        'seriesClients' => null,
        'seriesProjects' => null,
        'totalsJobCodes' => null,
        'totalsTasks' => null,
        'totalsClients' => null,
        'totalsProjects' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'seriesJobCodes' => 'SeriesJobCodes',
        'seriesTasks' => 'SeriesTasks',
        'seriesClients' => 'SeriesClients',
        'seriesProjects' => 'SeriesProjects',
        'totalsJobCodes' => 'TotalsJobCodes',
        'totalsTasks' => 'TotalsTasks',
        'totalsClients' => 'TotalsClients',
        'totalsProjects' => 'TotalsProjects'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'seriesJobCodes' => 'setSeriesJobCodes',
        'seriesTasks' => 'setSeriesTasks',
        'seriesClients' => 'setSeriesClients',
        'seriesProjects' => 'setSeriesProjects',
        'totalsJobCodes' => 'setTotalsJobCodes',
        'totalsTasks' => 'setTotalsTasks',
        'totalsClients' => 'setTotalsClients',
        'totalsProjects' => 'setTotalsProjects'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'seriesJobCodes' => 'getSeriesJobCodes',
        'seriesTasks' => 'getSeriesTasks',
        'seriesClients' => 'getSeriesClients',
        'seriesProjects' => 'getSeriesProjects',
        'totalsJobCodes' => 'getTotalsJobCodes',
        'totalsTasks' => 'getTotalsTasks',
        'totalsClients' => 'getTotalsClients',
        'totalsProjects' => 'getTotalsProjects'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['seriesJobCodes'] = isset($data['seriesJobCodes']) ? $data['seriesJobCodes'] : null;
        $this->container['seriesTasks'] = isset($data['seriesTasks']) ? $data['seriesTasks'] : null;
        $this->container['seriesClients'] = isset($data['seriesClients']) ? $data['seriesClients'] : null;
        $this->container['seriesProjects'] = isset($data['seriesProjects']) ? $data['seriesProjects'] : null;
        $this->container['totalsJobCodes'] = isset($data['totalsJobCodes']) ? $data['totalsJobCodes'] : null;
        $this->container['totalsTasks'] = isset($data['totalsTasks']) ? $data['totalsTasks'] : null;
        $this->container['totalsClients'] = isset($data['totalsClients']) ? $data['totalsClients'] : null;
        $this->container['totalsProjects'] = isset($data['totalsProjects']) ? $data['totalsProjects'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets seriesJobCodes
     *
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSJobSeriesReportItem[]
     */
    public function getSeriesJobCodes()
    {
        return $this->container['seriesJobCodes'];
    }

    /**
     * Sets seriesJobCodes
     *
     * @param \ChronoSheetsClient\ChronoSheetsClientLibModel\CSJobSeriesReportItem[] $seriesJobCodes seriesJobCodes
     *
     * @return $this
     */
    public function setSeriesJobCodes($seriesJobCodes)
    {
        $this->container['seriesJobCodes'] = $seriesJobCodes;

        return $this;
    }

    /**
     * Gets seriesTasks
     *
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSTaskSeriesReportItem[]
     */
    public function getSeriesTasks()
    {
        return $this->container['seriesTasks'];
    }

    /**
     * Sets seriesTasks
     *
     * @param \ChronoSheetsClient\ChronoSheetsClientLibModel\CSTaskSeriesReportItem[] $seriesTasks seriesTasks
     *
     * @return $this
     */
    public function setSeriesTasks($seriesTasks)
    {
        $this->container['seriesTasks'] = $seriesTasks;

        return $this;
    }

    /**
     * Gets seriesClients
     *
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSClientSeriesReportItem[]
     */
    public function getSeriesClients()
    {
        return $this->container['seriesClients'];
    }

    /**
     * Sets seriesClients
     *
     * @param \ChronoSheetsClient\ChronoSheetsClientLibModel\CSClientSeriesReportItem[] $seriesClients seriesClients
     *
     * @return $this
     */
    public function setSeriesClients($seriesClients)
    {
        $this->container['seriesClients'] = $seriesClients;

        return $this;
    }

    /**
     * Gets seriesProjects
     *
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSProjectSeriesReportItem[]
     */
    public function getSeriesProjects()
    {
        return $this->container['seriesProjects'];
    }

    /**
     * Sets seriesProjects
     *
     * @param \ChronoSheetsClient\ChronoSheetsClientLibModel\CSProjectSeriesReportItem[] $seriesProjects seriesProjects
     *
     * @return $this
     */
    public function setSeriesProjects($seriesProjects)
    {
        $this->container['seriesProjects'] = $seriesProjects;

        return $this;
    }

    /**
     * Gets totalsJobCodes
     *
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSJobTotalsReportItem[]
     */
    public function getTotalsJobCodes()
    {
        return $this->container['totalsJobCodes'];
    }

    /**
     * Sets totalsJobCodes
     *
     * @param \ChronoSheetsClient\ChronoSheetsClientLibModel\CSJobTotalsReportItem[] $totalsJobCodes totalsJobCodes
     *
     * @return $this
     */
    public function setTotalsJobCodes($totalsJobCodes)
    {
        $this->container['totalsJobCodes'] = $totalsJobCodes;

        return $this;
    }

    /**
     * Gets totalsTasks
     *
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSTaskTotalsReportItem[]
     */
    public function getTotalsTasks()
    {
        return $this->container['totalsTasks'];
    }

    /**
     * Sets totalsTasks
     *
     * @param \ChronoSheetsClient\ChronoSheetsClientLibModel\CSTaskTotalsReportItem[] $totalsTasks totalsTasks
     *
     * @return $this
     */
    public function setTotalsTasks($totalsTasks)
    {
        $this->container['totalsTasks'] = $totalsTasks;

        return $this;
    }

    /**
     * Gets totalsClients
     *
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSClientTotalsReportItem[]
     */
    public function getTotalsClients()
    {
        return $this->container['totalsClients'];
    }

    /**
     * Sets totalsClients
     *
     * @param \ChronoSheetsClient\ChronoSheetsClientLibModel\CSClientTotalsReportItem[] $totalsClients totalsClients
     *
     * @return $this
     */
    public function setTotalsClients($totalsClients)
    {
        $this->container['totalsClients'] = $totalsClients;

        return $this;
    }

    /**
     * Gets totalsProjects
     *
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\CSProjectTotalsReportItem[]
     */
    public function getTotalsProjects()
    {
        return $this->container['totalsProjects'];
    }

    /**
     * Sets totalsProjects
     *
     * @param \ChronoSheetsClient\ChronoSheetsClientLibModel\CSProjectTotalsReportItem[] $totalsProjects totalsProjects
     *
     * @return $this
     */
    public function setTotalsProjects($totalsProjects)
    {
        $this->container['totalsProjects'] = $totalsProjects;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


