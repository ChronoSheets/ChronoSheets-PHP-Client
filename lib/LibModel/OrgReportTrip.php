<?php
/**
 * OrgReportTrip
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibModel;

use \ArrayAccess;
use \ChronoSheetsClient\ObjectSerializer;

/**
 * OrgReportTrip Class Doc Comment
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class OrgReportTrip implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrgReportTrip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'username' => 'string',
        'emailAddress' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'tripId' => 'int',
        'timesheetId' => 'int',
        'vehicleId' => 'int',
        'userId' => 'int',
        'orgId' => 'int',
        'mobilePlatform' => 'string',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'vehicleName' => 'string',
        'vehicleMake' => 'string',
        'vehicleModel' => 'string',
        'vehicleYear' => 'string',
        'costPerKilometer' => 'double',
        'tripTotalCost' => 'double',
        'totalTripDistanceMeters' => 'double',
        'startAddress' => 'string',
        'endAddress' => 'string',
        'pathCoordinates' => '\ChronoSheetsClient\ChronoSheetsClientLibModel\TripCoordinate[]',
        'cacheExpiryDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'username' => null,
        'emailAddress' => null,
        'firstName' => null,
        'lastName' => null,
        'tripId' => 'int32',
        'timesheetId' => 'int32',
        'vehicleId' => 'int32',
        'userId' => 'int32',
        'orgId' => 'int32',
        'mobilePlatform' => null,
        'startDate' => 'date-time',
        'endDate' => 'date-time',
        'vehicleName' => null,
        'vehicleMake' => null,
        'vehicleModel' => null,
        'vehicleYear' => null,
        'costPerKilometer' => 'double',
        'tripTotalCost' => 'double',
        'totalTripDistanceMeters' => 'double',
        'startAddress' => null,
        'endAddress' => null,
        'pathCoordinates' => null,
        'cacheExpiryDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'Username',
        'emailAddress' => 'EmailAddress',
        'firstName' => 'FirstName',
        'lastName' => 'LastName',
        'tripId' => 'TripId',
        'timesheetId' => 'TimesheetId',
        'vehicleId' => 'VehicleId',
        'userId' => 'UserId',
        'orgId' => 'OrgId',
        'mobilePlatform' => 'MobilePlatform',
        'startDate' => 'StartDate',
        'endDate' => 'EndDate',
        'vehicleName' => 'VehicleName',
        'vehicleMake' => 'VehicleMake',
        'vehicleModel' => 'VehicleModel',
        'vehicleYear' => 'VehicleYear',
        'costPerKilometer' => 'CostPerKilometer',
        'tripTotalCost' => 'TripTotalCost',
        'totalTripDistanceMeters' => 'TotalTripDistanceMeters',
        'startAddress' => 'StartAddress',
        'endAddress' => 'EndAddress',
        'pathCoordinates' => 'PathCoordinates',
        'cacheExpiryDate' => 'CacheExpiryDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'setUsername',
        'emailAddress' => 'setEmailAddress',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'tripId' => 'setTripId',
        'timesheetId' => 'setTimesheetId',
        'vehicleId' => 'setVehicleId',
        'userId' => 'setUserId',
        'orgId' => 'setOrgId',
        'mobilePlatform' => 'setMobilePlatform',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'vehicleName' => 'setVehicleName',
        'vehicleMake' => 'setVehicleMake',
        'vehicleModel' => 'setVehicleModel',
        'vehicleYear' => 'setVehicleYear',
        'costPerKilometer' => 'setCostPerKilometer',
        'tripTotalCost' => 'setTripTotalCost',
        'totalTripDistanceMeters' => 'setTotalTripDistanceMeters',
        'startAddress' => 'setStartAddress',
        'endAddress' => 'setEndAddress',
        'pathCoordinates' => 'setPathCoordinates',
        'cacheExpiryDate' => 'setCacheExpiryDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'getUsername',
        'emailAddress' => 'getEmailAddress',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'tripId' => 'getTripId',
        'timesheetId' => 'getTimesheetId',
        'vehicleId' => 'getVehicleId',
        'userId' => 'getUserId',
        'orgId' => 'getOrgId',
        'mobilePlatform' => 'getMobilePlatform',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'vehicleName' => 'getVehicleName',
        'vehicleMake' => 'getVehicleMake',
        'vehicleModel' => 'getVehicleModel',
        'vehicleYear' => 'getVehicleYear',
        'costPerKilometer' => 'getCostPerKilometer',
        'tripTotalCost' => 'getTripTotalCost',
        'totalTripDistanceMeters' => 'getTotalTripDistanceMeters',
        'startAddress' => 'getStartAddress',
        'endAddress' => 'getEndAddress',
        'pathCoordinates' => 'getPathCoordinates',
        'cacheExpiryDate' => 'getCacheExpiryDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MOBILE_PLATFORM_UNKNOWN = 'Unknown';
    const MOBILE_PLATFORM_I_OS = 'iOS';
    const MOBILE_PLATFORM_ANDROID = 'Android';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMobilePlatformAllowableValues()
    {
        return [
            self::MOBILE_PLATFORM_UNKNOWN,
            self::MOBILE_PLATFORM_I_OS,
            self::MOBILE_PLATFORM_ANDROID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['username'] = $data['username'] ?? null;
        $this->container['emailAddress'] = $data['emailAddress'] ?? null;
        $this->container['firstName'] = $data['firstName'] ?? null;
        $this->container['lastName'] = $data['lastName'] ?? null;
        $this->container['tripId'] = $data['tripId'] ?? null;
        $this->container['timesheetId'] = $data['timesheetId'] ?? null;
        $this->container['vehicleId'] = $data['vehicleId'] ?? null;
        $this->container['userId'] = $data['userId'] ?? null;
        $this->container['orgId'] = $data['orgId'] ?? null;
        $this->container['mobilePlatform'] = $data['mobilePlatform'] ?? null;
        $this->container['startDate'] = $data['startDate'] ?? null;
        $this->container['endDate'] = $data['endDate'] ?? null;
        $this->container['vehicleName'] = $data['vehicleName'] ?? null;
        $this->container['vehicleMake'] = $data['vehicleMake'] ?? null;
        $this->container['vehicleModel'] = $data['vehicleModel'] ?? null;
        $this->container['vehicleYear'] = $data['vehicleYear'] ?? null;
        $this->container['costPerKilometer'] = $data['costPerKilometer'] ?? null;
        $this->container['tripTotalCost'] = $data['tripTotalCost'] ?? null;
        $this->container['totalTripDistanceMeters'] = $data['totalTripDistanceMeters'] ?? null;
        $this->container['startAddress'] = $data['startAddress'] ?? null;
        $this->container['endAddress'] = $data['endAddress'] ?? null;
        $this->container['pathCoordinates'] = $data['pathCoordinates'] ?? null;
        $this->container['cacheExpiryDate'] = $data['cacheExpiryDate'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMobilePlatformAllowableValues();
        if (!is_null($this->container['mobilePlatform']) && !in_array($this->container['mobilePlatform'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mobilePlatform', must be one of '%s'",
                $this->container['mobilePlatform'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['emailAddress'];
    }

    /**
     * Sets emailAddress
     *
     * @param string|null $emailAddress emailAddress
     *
     * @return self
     */
    public function setEmailAddress($emailAddress)
    {
        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName firstName
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName lastName
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets tripId
     *
     * @return int|null
     */
    public function getTripId()
    {
        return $this->container['tripId'];
    }

    /**
     * Sets tripId
     *
     * @param int|null $tripId tripId
     *
     * @return self
     */
    public function setTripId($tripId)
    {
        $this->container['tripId'] = $tripId;

        return $this;
    }

    /**
     * Gets timesheetId
     *
     * @return int|null
     */
    public function getTimesheetId()
    {
        return $this->container['timesheetId'];
    }

    /**
     * Sets timesheetId
     *
     * @param int|null $timesheetId timesheetId
     *
     * @return self
     */
    public function setTimesheetId($timesheetId)
    {
        $this->container['timesheetId'] = $timesheetId;

        return $this;
    }

    /**
     * Gets vehicleId
     *
     * @return int|null
     */
    public function getVehicleId()
    {
        return $this->container['vehicleId'];
    }

    /**
     * Sets vehicleId
     *
     * @param int|null $vehicleId vehicleId
     *
     * @return self
     */
    public function setVehicleId($vehicleId)
    {
        $this->container['vehicleId'] = $vehicleId;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int|null $userId userId
     *
     * @return self
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets orgId
     *
     * @return int|null
     */
    public function getOrgId()
    {
        return $this->container['orgId'];
    }

    /**
     * Sets orgId
     *
     * @param int|null $orgId orgId
     *
     * @return self
     */
    public function setOrgId($orgId)
    {
        $this->container['orgId'] = $orgId;

        return $this;
    }

    /**
     * Gets mobilePlatform
     *
     * @return string|null
     */
    public function getMobilePlatform()
    {
        return $this->container['mobilePlatform'];
    }

    /**
     * Sets mobilePlatform
     *
     * @param string|null $mobilePlatform mobilePlatform
     *
     * @return self
     */
    public function setMobilePlatform($mobilePlatform)
    {
        $allowedValues = $this->getMobilePlatformAllowableValues();
        if (!is_null($mobilePlatform) && !in_array($mobilePlatform, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mobilePlatform', must be one of '%s'",
                    $mobilePlatform,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mobilePlatform'] = $mobilePlatform;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate startDate
     *
     * @return self
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate endDate
     *
     * @return self
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets vehicleName
     *
     * @return string|null
     */
    public function getVehicleName()
    {
        return $this->container['vehicleName'];
    }

    /**
     * Sets vehicleName
     *
     * @param string|null $vehicleName vehicleName
     *
     * @return self
     */
    public function setVehicleName($vehicleName)
    {
        $this->container['vehicleName'] = $vehicleName;

        return $this;
    }

    /**
     * Gets vehicleMake
     *
     * @return string|null
     */
    public function getVehicleMake()
    {
        return $this->container['vehicleMake'];
    }

    /**
     * Sets vehicleMake
     *
     * @param string|null $vehicleMake vehicleMake
     *
     * @return self
     */
    public function setVehicleMake($vehicleMake)
    {
        $this->container['vehicleMake'] = $vehicleMake;

        return $this;
    }

    /**
     * Gets vehicleModel
     *
     * @return string|null
     */
    public function getVehicleModel()
    {
        return $this->container['vehicleModel'];
    }

    /**
     * Sets vehicleModel
     *
     * @param string|null $vehicleModel vehicleModel
     *
     * @return self
     */
    public function setVehicleModel($vehicleModel)
    {
        $this->container['vehicleModel'] = $vehicleModel;

        return $this;
    }

    /**
     * Gets vehicleYear
     *
     * @return string|null
     */
    public function getVehicleYear()
    {
        return $this->container['vehicleYear'];
    }

    /**
     * Sets vehicleYear
     *
     * @param string|null $vehicleYear vehicleYear
     *
     * @return self
     */
    public function setVehicleYear($vehicleYear)
    {
        $this->container['vehicleYear'] = $vehicleYear;

        return $this;
    }

    /**
     * Gets costPerKilometer
     *
     * @return double|null
     */
    public function getCostPerKilometer()
    {
        return $this->container['costPerKilometer'];
    }

    /**
     * Sets costPerKilometer
     *
     * @param double|null $costPerKilometer costPerKilometer
     *
     * @return self
     */
    public function setCostPerKilometer($costPerKilometer)
    {
        $this->container['costPerKilometer'] = $costPerKilometer;

        return $this;
    }

    /**
     * Gets tripTotalCost
     *
     * @return double|null
     */
    public function getTripTotalCost()
    {
        return $this->container['tripTotalCost'];
    }

    /**
     * Sets tripTotalCost
     *
     * @param double|null $tripTotalCost tripTotalCost
     *
     * @return self
     */
    public function setTripTotalCost($tripTotalCost)
    {
        $this->container['tripTotalCost'] = $tripTotalCost;

        return $this;
    }

    /**
     * Gets totalTripDistanceMeters
     *
     * @return double|null
     */
    public function getTotalTripDistanceMeters()
    {
        return $this->container['totalTripDistanceMeters'];
    }

    /**
     * Sets totalTripDistanceMeters
     *
     * @param double|null $totalTripDistanceMeters totalTripDistanceMeters
     *
     * @return self
     */
    public function setTotalTripDistanceMeters($totalTripDistanceMeters)
    {
        $this->container['totalTripDistanceMeters'] = $totalTripDistanceMeters;

        return $this;
    }

    /**
     * Gets startAddress
     *
     * @return string|null
     */
    public function getStartAddress()
    {
        return $this->container['startAddress'];
    }

    /**
     * Sets startAddress
     *
     * @param string|null $startAddress startAddress
     *
     * @return self
     */
    public function setStartAddress($startAddress)
    {
        $this->container['startAddress'] = $startAddress;

        return $this;
    }

    /**
     * Gets endAddress
     *
     * @return string|null
     */
    public function getEndAddress()
    {
        return $this->container['endAddress'];
    }

    /**
     * Sets endAddress
     *
     * @param string|null $endAddress endAddress
     *
     * @return self
     */
    public function setEndAddress($endAddress)
    {
        $this->container['endAddress'] = $endAddress;

        return $this;
    }

    /**
     * Gets pathCoordinates
     *
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\TripCoordinate[]|null
     */
    public function getPathCoordinates()
    {
        return $this->container['pathCoordinates'];
    }

    /**
     * Sets pathCoordinates
     *
     * @param \ChronoSheetsClient\ChronoSheetsClientLibModel\TripCoordinate[]|null $pathCoordinates pathCoordinates
     *
     * @return self
     */
    public function setPathCoordinates($pathCoordinates)
    {
        $this->container['pathCoordinates'] = $pathCoordinates;

        return $this;
    }

    /**
     * Gets cacheExpiryDate
     *
     * @return \DateTime|null
     */
    public function getCacheExpiryDate()
    {
        return $this->container['cacheExpiryDate'];
    }

    /**
     * Sets cacheExpiryDate
     *
     * @param \DateTime|null $cacheExpiryDate cacheExpiryDate
     *
     * @return self
     */
    public function setCacheExpiryDate($cacheExpiryDate)
    {
        $this->container['cacheExpiryDate'] = $cacheExpiryDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


