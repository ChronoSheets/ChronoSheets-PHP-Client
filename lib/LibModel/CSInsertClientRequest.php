<?php
/**
 * CSInsertClientRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibModel;

use \ArrayAccess;
use \ChronoSheetsClient\ObjectSerializer;

/**
 * CSInsertClientRequest Class Doc Comment
 *
 * @category Class
 * @description Fields for inserting a new Client
 * @package  ChronoSheetsClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CSInsertClientRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InsertClientRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clientName' => 'string',
        'clientAddressLine1' => 'string',
        'clientAddressLine2' => 'string',
        'clientSuburb' => 'string',
        'clientState' => 'string',
        'clientPostCode' => 'string',
        'personOfContact' => 'string',
        'clientPhoneNumber' => 'string',
        'clientMobileNumber' => 'string',
        'clientEmailAddress' => 'string',
        'clientWebURL' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clientName' => null,
        'clientAddressLine1' => null,
        'clientAddressLine2' => null,
        'clientSuburb' => null,
        'clientState' => null,
        'clientPostCode' => null,
        'personOfContact' => null,
        'clientPhoneNumber' => null,
        'clientMobileNumber' => null,
        'clientEmailAddress' => null,
        'clientWebURL' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clientName' => 'ClientName',
        'clientAddressLine1' => 'ClientAddressLine1',
        'clientAddressLine2' => 'ClientAddressLine2',
        'clientSuburb' => 'ClientSuburb',
        'clientState' => 'ClientState',
        'clientPostCode' => 'ClientPostCode',
        'personOfContact' => 'PersonOfContact',
        'clientPhoneNumber' => 'ClientPhoneNumber',
        'clientMobileNumber' => 'ClientMobileNumber',
        'clientEmailAddress' => 'ClientEmailAddress',
        'clientWebURL' => 'ClientWebURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clientName' => 'setClientName',
        'clientAddressLine1' => 'setClientAddressLine1',
        'clientAddressLine2' => 'setClientAddressLine2',
        'clientSuburb' => 'setClientSuburb',
        'clientState' => 'setClientState',
        'clientPostCode' => 'setClientPostCode',
        'personOfContact' => 'setPersonOfContact',
        'clientPhoneNumber' => 'setClientPhoneNumber',
        'clientMobileNumber' => 'setClientMobileNumber',
        'clientEmailAddress' => 'setClientEmailAddress',
        'clientWebURL' => 'setClientWebURL'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clientName' => 'getClientName',
        'clientAddressLine1' => 'getClientAddressLine1',
        'clientAddressLine2' => 'getClientAddressLine2',
        'clientSuburb' => 'getClientSuburb',
        'clientState' => 'getClientState',
        'clientPostCode' => 'getClientPostCode',
        'personOfContact' => 'getPersonOfContact',
        'clientPhoneNumber' => 'getClientPhoneNumber',
        'clientMobileNumber' => 'getClientMobileNumber',
        'clientEmailAddress' => 'getClientEmailAddress',
        'clientWebURL' => 'getClientWebURL'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clientName'] = isset($data['clientName']) ? $data['clientName'] : null;
        $this->container['clientAddressLine1'] = isset($data['clientAddressLine1']) ? $data['clientAddressLine1'] : null;
        $this->container['clientAddressLine2'] = isset($data['clientAddressLine2']) ? $data['clientAddressLine2'] : null;
        $this->container['clientSuburb'] = isset($data['clientSuburb']) ? $data['clientSuburb'] : null;
        $this->container['clientState'] = isset($data['clientState']) ? $data['clientState'] : null;
        $this->container['clientPostCode'] = isset($data['clientPostCode']) ? $data['clientPostCode'] : null;
        $this->container['personOfContact'] = isset($data['personOfContact']) ? $data['personOfContact'] : null;
        $this->container['clientPhoneNumber'] = isset($data['clientPhoneNumber']) ? $data['clientPhoneNumber'] : null;
        $this->container['clientMobileNumber'] = isset($data['clientMobileNumber']) ? $data['clientMobileNumber'] : null;
        $this->container['clientEmailAddress'] = isset($data['clientEmailAddress']) ? $data['clientEmailAddress'] : null;
        $this->container['clientWebURL'] = isset($data['clientWebURL']) ? $data['clientWebURL'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets clientName
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['clientName'];
    }

    /**
     * Sets clientName
     *
     * @param string $clientName The name of the Client
     *
     * @return $this
     */
    public function setClientName($clientName)
    {
        $this->container['clientName'] = $clientName;

        return $this;
    }

    /**
     * Gets clientAddressLine1
     *
     * @return string
     */
    public function getClientAddressLine1()
    {
        return $this->container['clientAddressLine1'];
    }

    /**
     * Sets clientAddressLine1
     *
     * @param string $clientAddressLine1 Address line 1 of the Client
     *
     * @return $this
     */
    public function setClientAddressLine1($clientAddressLine1)
    {
        $this->container['clientAddressLine1'] = $clientAddressLine1;

        return $this;
    }

    /**
     * Gets clientAddressLine2
     *
     * @return string
     */
    public function getClientAddressLine2()
    {
        return $this->container['clientAddressLine2'];
    }

    /**
     * Sets clientAddressLine2
     *
     * @param string $clientAddressLine2 Address line 2 of the Client
     *
     * @return $this
     */
    public function setClientAddressLine2($clientAddressLine2)
    {
        $this->container['clientAddressLine2'] = $clientAddressLine2;

        return $this;
    }

    /**
     * Gets clientSuburb
     *
     * @return string
     */
    public function getClientSuburb()
    {
        return $this->container['clientSuburb'];
    }

    /**
     * Sets clientSuburb
     *
     * @param string $clientSuburb The suburb of the Client's address
     *
     * @return $this
     */
    public function setClientSuburb($clientSuburb)
    {
        $this->container['clientSuburb'] = $clientSuburb;

        return $this;
    }

    /**
     * Gets clientState
     *
     * @return string
     */
    public function getClientState()
    {
        return $this->container['clientState'];
    }

    /**
     * Sets clientState
     *
     * @param string $clientState The state of the Client's address
     *
     * @return $this
     */
    public function setClientState($clientState)
    {
        $this->container['clientState'] = $clientState;

        return $this;
    }

    /**
     * Gets clientPostCode
     *
     * @return string
     */
    public function getClientPostCode()
    {
        return $this->container['clientPostCode'];
    }

    /**
     * Sets clientPostCode
     *
     * @param string $clientPostCode The post code of the Client's address
     *
     * @return $this
     */
    public function setClientPostCode($clientPostCode)
    {
        $this->container['clientPostCode'] = $clientPostCode;

        return $this;
    }

    /**
     * Gets personOfContact
     *
     * @return string
     */
    public function getPersonOfContact()
    {
        return $this->container['personOfContact'];
    }

    /**
     * Sets personOfContact
     *
     * @param string $personOfContact The name of the contact working with the Client
     *
     * @return $this
     */
    public function setPersonOfContact($personOfContact)
    {
        $this->container['personOfContact'] = $personOfContact;

        return $this;
    }

    /**
     * Gets clientPhoneNumber
     *
     * @return string
     */
    public function getClientPhoneNumber()
    {
        return $this->container['clientPhoneNumber'];
    }

    /**
     * Sets clientPhoneNumber
     *
     * @param string $clientPhoneNumber The phone number of the Client
     *
     * @return $this
     */
    public function setClientPhoneNumber($clientPhoneNumber)
    {
        $this->container['clientPhoneNumber'] = $clientPhoneNumber;

        return $this;
    }

    /**
     * Gets clientMobileNumber
     *
     * @return string
     */
    public function getClientMobileNumber()
    {
        return $this->container['clientMobileNumber'];
    }

    /**
     * Sets clientMobileNumber
     *
     * @param string $clientMobileNumber The mobile phone number of the Client
     *
     * @return $this
     */
    public function setClientMobileNumber($clientMobileNumber)
    {
        $this->container['clientMobileNumber'] = $clientMobileNumber;

        return $this;
    }

    /**
     * Gets clientEmailAddress
     *
     * @return string
     */
    public function getClientEmailAddress()
    {
        return $this->container['clientEmailAddress'];
    }

    /**
     * Sets clientEmailAddress
     *
     * @param string $clientEmailAddress The email address of the Client
     *
     * @return $this
     */
    public function setClientEmailAddress($clientEmailAddress)
    {
        $this->container['clientEmailAddress'] = $clientEmailAddress;

        return $this;
    }

    /**
     * Gets clientWebURL
     *
     * @return string
     */
    public function getClientWebURL()
    {
        return $this->container['clientWebURL'];
    }

    /**
     * Sets clientWebURL
     *
     * @param string $clientWebURL The Client's website URL
     *
     * @return $this
     */
    public function setClientWebURL($clientWebURL)
    {
        $this->container['clientWebURL'] = $clientWebURL;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


