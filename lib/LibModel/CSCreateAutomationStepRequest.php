<?php
/**
 * CSCreateAutomationStepRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibModel;

use \ArrayAccess;
use \ChronoSheetsClient\ObjectSerializer;

/**
 * CSCreateAutomationStepRequest Class Doc Comment
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CSCreateAutomationStepRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateAutomationStepRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'geofencingId' => 'int',
        'nfcId' => 'int',
        'automationActionType' => 'string',
        'latitude' => 'double',
        'longitude' => 'double',
        'clientTime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'geofencingId' => 'int32',
        'nfcId' => 'int32',
        'automationActionType' => null,
        'latitude' => 'double',
        'longitude' => 'double',
        'clientTime' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'geofencingId' => 'GeofencingId',
        'nfcId' => 'NfcId',
        'automationActionType' => 'AutomationActionType',
        'latitude' => 'Latitude',
        'longitude' => 'Longitude',
        'clientTime' => 'ClientTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'geofencingId' => 'setGeofencingId',
        'nfcId' => 'setNfcId',
        'automationActionType' => 'setAutomationActionType',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'clientTime' => 'setClientTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'geofencingId' => 'getGeofencingId',
        'nfcId' => 'getNfcId',
        'automationActionType' => 'getAutomationActionType',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'clientTime' => 'getClientTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CS_AUTOMATION_ACTION_TYPE_ENTER_GEOFENCE = 'EnterGeofence';
    const CS_AUTOMATION_ACTION_TYPE_EXIT_GEOFENCE = 'ExitGeofence';
    const CS_AUTOMATION_ACTION_TYPE_TAP_ON_NFC = 'TapOnNfc';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutomationActionTypeAllowableValues()
    {
        return [
            self::CS_AUTOMATION_ACTION_TYPE_ENTER_GEOFENCE,
            self::CS_AUTOMATION_ACTION_TYPE_EXIT_GEOFENCE,
            self::CS_AUTOMATION_ACTION_TYPE_TAP_ON_NFC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['geofencingId'] = isset($data['geofencingId']) ? $data['geofencingId'] : null;
        $this->container['nfcId'] = isset($data['nfcId']) ? $data['nfcId'] : null;
        $this->container['automationActionType'] = isset($data['automationActionType']) ? $data['automationActionType'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['clientTime'] = isset($data['clientTime']) ? $data['clientTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAutomationActionTypeAllowableValues();
        if (!is_null($this->container['automationActionType']) && !in_array($this->container['automationActionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'automationActionType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets geofencingId
     *
     * @return int
     */
    public function getGeofencingId()
    {
        return $this->container['geofencingId'];
    }

    /**
     * Sets geofencingId
     *
     * @param int $geofencingId geofencingId
     *
     * @return $this
     */
    public function setGeofencingId($geofencingId)
    {
        $this->container['geofencingId'] = $geofencingId;

        return $this;
    }

    /**
     * Gets nfcId
     *
     * @return int
     */
    public function getNfcId()
    {
        return $this->container['nfcId'];
    }

    /**
     * Sets nfcId
     *
     * @param int $nfcId nfcId
     *
     * @return $this
     */
    public function setNfcId($nfcId)
    {
        $this->container['nfcId'] = $nfcId;

        return $this;
    }

    /**
     * Gets automationActionType
     *
     * @return string
     */
    public function getAutomationActionType()
    {
        return $this->container['automationActionType'];
    }

    /**
     * Sets automationActionType
     *
     * @param string $automationActionType automationActionType
     *
     * @return $this
     */
    public function setAutomationActionType($automationActionType)
    {
        $allowedValues = $this->getAutomationActionTypeAllowableValues();
        if (!is_null($automationActionType) && !in_array($automationActionType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'automationActionType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['automationActionType'] = $automationActionType;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return double
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param double $latitude latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return double
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param double $longitude longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets clientTime
     *
     * @return \DateTime
     */
    public function getClientTime()
    {
        return $this->container['clientTime'];
    }

    /**
     * Sets clientTime
     *
     * @param \DateTime $clientTime clientTime
     *
     * @return $this
     */
    public function setClientTime($clientTime)
    {
        $this->container['clientTime'] = $clientTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


