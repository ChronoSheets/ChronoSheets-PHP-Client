<?php
/**
 * SaveClientRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibModel;

use \ArrayAccess;
use \ChronoSheetsClient\ObjectSerializer;

/**
 * SaveClientRequest Class Doc Comment
 *
 * @category Class
 * @description Fields used to save a Client
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SaveClientRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SaveClientRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'clientName' => 'string',
        'clientAddressLine1' => 'string',
        'clientAddressLine2' => 'string',
        'clientSuburb' => 'string',
        'clientState' => 'string',
        'clientPostCode' => 'string',
        'personOfContact' => 'string',
        'clientPhoneNumber' => 'string',
        'clientMobileNumber' => 'string',
        'clientEmailAddress' => 'string',
        'clientWebURL' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'clientName' => null,
        'clientAddressLine1' => null,
        'clientAddressLine2' => null,
        'clientSuburb' => null,
        'clientState' => null,
        'clientPostCode' => null,
        'personOfContact' => null,
        'clientPhoneNumber' => null,
        'clientMobileNumber' => null,
        'clientEmailAddress' => null,
        'clientWebURL' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'clientName' => 'ClientName',
        'clientAddressLine1' => 'ClientAddressLine1',
        'clientAddressLine2' => 'ClientAddressLine2',
        'clientSuburb' => 'ClientSuburb',
        'clientState' => 'ClientState',
        'clientPostCode' => 'ClientPostCode',
        'personOfContact' => 'PersonOfContact',
        'clientPhoneNumber' => 'ClientPhoneNumber',
        'clientMobileNumber' => 'ClientMobileNumber',
        'clientEmailAddress' => 'ClientEmailAddress',
        'clientWebURL' => 'ClientWebURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'clientName' => 'setClientName',
        'clientAddressLine1' => 'setClientAddressLine1',
        'clientAddressLine2' => 'setClientAddressLine2',
        'clientSuburb' => 'setClientSuburb',
        'clientState' => 'setClientState',
        'clientPostCode' => 'setClientPostCode',
        'personOfContact' => 'setPersonOfContact',
        'clientPhoneNumber' => 'setClientPhoneNumber',
        'clientMobileNumber' => 'setClientMobileNumber',
        'clientEmailAddress' => 'setClientEmailAddress',
        'clientWebURL' => 'setClientWebURL'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'clientName' => 'getClientName',
        'clientAddressLine1' => 'getClientAddressLine1',
        'clientAddressLine2' => 'getClientAddressLine2',
        'clientSuburb' => 'getClientSuburb',
        'clientState' => 'getClientState',
        'clientPostCode' => 'getClientPostCode',
        'personOfContact' => 'getPersonOfContact',
        'clientPhoneNumber' => 'getClientPhoneNumber',
        'clientMobileNumber' => 'getClientMobileNumber',
        'clientEmailAddress' => 'getClientEmailAddress',
        'clientWebURL' => 'getClientWebURL'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['clientName'] = $data['clientName'] ?? null;
        $this->container['clientAddressLine1'] = $data['clientAddressLine1'] ?? null;
        $this->container['clientAddressLine2'] = $data['clientAddressLine2'] ?? null;
        $this->container['clientSuburb'] = $data['clientSuburb'] ?? null;
        $this->container['clientState'] = $data['clientState'] ?? null;
        $this->container['clientPostCode'] = $data['clientPostCode'] ?? null;
        $this->container['personOfContact'] = $data['personOfContact'] ?? null;
        $this->container['clientPhoneNumber'] = $data['clientPhoneNumber'] ?? null;
        $this->container['clientMobileNumber'] = $data['clientMobileNumber'] ?? null;
        $this->container['clientEmailAddress'] = $data['clientEmailAddress'] ?? null;
        $this->container['clientWebURL'] = $data['clientWebURL'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The Id of the Client
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets clientName
     *
     * @return string|null
     */
    public function getClientName()
    {
        return $this->container['clientName'];
    }

    /**
     * Sets clientName
     *
     * @param string|null $clientName The name of the Client
     *
     * @return self
     */
    public function setClientName($clientName)
    {
        $this->container['clientName'] = $clientName;

        return $this;
    }

    /**
     * Gets clientAddressLine1
     *
     * @return string|null
     */
    public function getClientAddressLine1()
    {
        return $this->container['clientAddressLine1'];
    }

    /**
     * Sets clientAddressLine1
     *
     * @param string|null $clientAddressLine1 Address line 1 of the Client
     *
     * @return self
     */
    public function setClientAddressLine1($clientAddressLine1)
    {
        $this->container['clientAddressLine1'] = $clientAddressLine1;

        return $this;
    }

    /**
     * Gets clientAddressLine2
     *
     * @return string|null
     */
    public function getClientAddressLine2()
    {
        return $this->container['clientAddressLine2'];
    }

    /**
     * Sets clientAddressLine2
     *
     * @param string|null $clientAddressLine2 Address line 2 of the Client
     *
     * @return self
     */
    public function setClientAddressLine2($clientAddressLine2)
    {
        $this->container['clientAddressLine2'] = $clientAddressLine2;

        return $this;
    }

    /**
     * Gets clientSuburb
     *
     * @return string|null
     */
    public function getClientSuburb()
    {
        return $this->container['clientSuburb'];
    }

    /**
     * Sets clientSuburb
     *
     * @param string|null $clientSuburb The suburb of the Client's address
     *
     * @return self
     */
    public function setClientSuburb($clientSuburb)
    {
        $this->container['clientSuburb'] = $clientSuburb;

        return $this;
    }

    /**
     * Gets clientState
     *
     * @return string|null
     */
    public function getClientState()
    {
        return $this->container['clientState'];
    }

    /**
     * Sets clientState
     *
     * @param string|null $clientState The state of the Client's address
     *
     * @return self
     */
    public function setClientState($clientState)
    {
        $this->container['clientState'] = $clientState;

        return $this;
    }

    /**
     * Gets clientPostCode
     *
     * @return string|null
     */
    public function getClientPostCode()
    {
        return $this->container['clientPostCode'];
    }

    /**
     * Sets clientPostCode
     *
     * @param string|null $clientPostCode The post code of the Client's address
     *
     * @return self
     */
    public function setClientPostCode($clientPostCode)
    {
        $this->container['clientPostCode'] = $clientPostCode;

        return $this;
    }

    /**
     * Gets personOfContact
     *
     * @return string|null
     */
    public function getPersonOfContact()
    {
        return $this->container['personOfContact'];
    }

    /**
     * Sets personOfContact
     *
     * @param string|null $personOfContact The name of the contact working with the Client
     *
     * @return self
     */
    public function setPersonOfContact($personOfContact)
    {
        $this->container['personOfContact'] = $personOfContact;

        return $this;
    }

    /**
     * Gets clientPhoneNumber
     *
     * @return string|null
     */
    public function getClientPhoneNumber()
    {
        return $this->container['clientPhoneNumber'];
    }

    /**
     * Sets clientPhoneNumber
     *
     * @param string|null $clientPhoneNumber The phone number of the Client
     *
     * @return self
     */
    public function setClientPhoneNumber($clientPhoneNumber)
    {
        $this->container['clientPhoneNumber'] = $clientPhoneNumber;

        return $this;
    }

    /**
     * Gets clientMobileNumber
     *
     * @return string|null
     */
    public function getClientMobileNumber()
    {
        return $this->container['clientMobileNumber'];
    }

    /**
     * Sets clientMobileNumber
     *
     * @param string|null $clientMobileNumber The mobile phone number of the Client
     *
     * @return self
     */
    public function setClientMobileNumber($clientMobileNumber)
    {
        $this->container['clientMobileNumber'] = $clientMobileNumber;

        return $this;
    }

    /**
     * Gets clientEmailAddress
     *
     * @return string|null
     */
    public function getClientEmailAddress()
    {
        return $this->container['clientEmailAddress'];
    }

    /**
     * Sets clientEmailAddress
     *
     * @param string|null $clientEmailAddress The email address of the Client
     *
     * @return self
     */
    public function setClientEmailAddress($clientEmailAddress)
    {
        $this->container['clientEmailAddress'] = $clientEmailAddress;

        return $this;
    }

    /**
     * Gets clientWebURL
     *
     * @return string|null
     */
    public function getClientWebURL()
    {
        return $this->container['clientWebURL'];
    }

    /**
     * Sets clientWebURL
     *
     * @param string|null $clientWebURL The Client's website URL
     *
     * @return self
     */
    public function setClientWebURL($clientWebURL)
    {
        $this->container['clientWebURL'] = $clientWebURL;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


