<?php
/**
 * Geofence
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibModel;

use \ArrayAccess;
use \ChronoSheetsClient\ObjectSerializer;

/**
 * Geofence Class Doc Comment
 *
 * @category Class
 * @description A geofence
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Geofence implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Geofence';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'geoFencingId' => 'int',
        'orgId' => 'int',
        'createdByUserId' => 'int',
        'lastUpdatedByUserId' => 'int',
        'name' => 'string',
        'locationName' => 'string',
        'coordinates' => '\ChronoSheetsClient\ChronoSheetsClientLibModel\BasicCoordinate[]',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'triggerJobCodeId' => 'int',
        'triggerTaskId' => 'int',
        'triggerSettings' => 'string',
        'alertToOrgGroupId' => 'int',
        'alertSettings' => 'string',
        'startTimeHour' => 'int',
        'startTimeMinute' => 'int',
        'endTimeHour' => 'int',
        'endTimeMinute' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'geoFencingId' => 'int32',
        'orgId' => 'int32',
        'createdByUserId' => 'int32',
        'lastUpdatedByUserId' => 'int32',
        'name' => null,
        'locationName' => null,
        'coordinates' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'triggerJobCodeId' => 'int32',
        'triggerTaskId' => 'int32',
        'triggerSettings' => null,
        'alertToOrgGroupId' => 'int32',
        'alertSettings' => null,
        'startTimeHour' => 'int32',
        'startTimeMinute' => 'int32',
        'endTimeHour' => 'int32',
        'endTimeMinute' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'geoFencingId' => 'GeoFencingId',
        'orgId' => 'OrgId',
        'createdByUserId' => 'CreatedByUserId',
        'lastUpdatedByUserId' => 'LastUpdatedByUserId',
        'name' => 'Name',
        'locationName' => 'LocationName',
        'coordinates' => 'Coordinates',
        'createdAt' => 'CreatedAt',
        'updatedAt' => 'UpdatedAt',
        'triggerJobCodeId' => 'TriggerJobCodeId',
        'triggerTaskId' => 'TriggerTaskId',
        'triggerSettings' => 'TriggerSettings',
        'alertToOrgGroupId' => 'AlertToOrgGroupId',
        'alertSettings' => 'AlertSettings',
        'startTimeHour' => 'StartTimeHour',
        'startTimeMinute' => 'StartTimeMinute',
        'endTimeHour' => 'EndTimeHour',
        'endTimeMinute' => 'EndTimeMinute'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'geoFencingId' => 'setGeoFencingId',
        'orgId' => 'setOrgId',
        'createdByUserId' => 'setCreatedByUserId',
        'lastUpdatedByUserId' => 'setLastUpdatedByUserId',
        'name' => 'setName',
        'locationName' => 'setLocationName',
        'coordinates' => 'setCoordinates',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'triggerJobCodeId' => 'setTriggerJobCodeId',
        'triggerTaskId' => 'setTriggerTaskId',
        'triggerSettings' => 'setTriggerSettings',
        'alertToOrgGroupId' => 'setAlertToOrgGroupId',
        'alertSettings' => 'setAlertSettings',
        'startTimeHour' => 'setStartTimeHour',
        'startTimeMinute' => 'setStartTimeMinute',
        'endTimeHour' => 'setEndTimeHour',
        'endTimeMinute' => 'setEndTimeMinute'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'geoFencingId' => 'getGeoFencingId',
        'orgId' => 'getOrgId',
        'createdByUserId' => 'getCreatedByUserId',
        'lastUpdatedByUserId' => 'getLastUpdatedByUserId',
        'name' => 'getName',
        'locationName' => 'getLocationName',
        'coordinates' => 'getCoordinates',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'triggerJobCodeId' => 'getTriggerJobCodeId',
        'triggerTaskId' => 'getTriggerTaskId',
        'triggerSettings' => 'getTriggerSettings',
        'alertToOrgGroupId' => 'getAlertToOrgGroupId',
        'alertSettings' => 'getAlertSettings',
        'startTimeHour' => 'getStartTimeHour',
        'startTimeMinute' => 'getStartTimeMinute',
        'endTimeHour' => 'getEndTimeHour',
        'endTimeMinute' => 'getEndTimeMinute'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TRIGGER_SETTINGS_NONE = 'None';
    const TRIGGER_SETTINGS_START_TIMESHEET_WHEN_ENTERING = 'StartTimesheetWhenEntering';
    const TRIGGER_SETTINGS_STOP_TIMESHEET_WHEN_ENTERING = 'StopTimesheetWhenEntering';
    const TRIGGER_SETTINGS_START_ON_ENTER_STOP_ON_LEAVE = 'StartOnEnterStopOnLeave';
    const ALERT_SETTINGS_NONE = 'None';
    const ALERT_SETTINGS_SEND_WHEN_ENTERING = 'SendWhenEntering';
    const ALERT_SETTINGS_SEND_WHEN_EXITING = 'SendWhenExiting';
    const ALERT_SETTINGS_SEND_WHEN_ENTERING_OR_EXITING = 'SendWhenEnteringOrExiting';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggerSettingsAllowableValues()
    {
        return [
            self::TRIGGER_SETTINGS_NONE,
            self::TRIGGER_SETTINGS_START_TIMESHEET_WHEN_ENTERING,
            self::TRIGGER_SETTINGS_STOP_TIMESHEET_WHEN_ENTERING,
            self::TRIGGER_SETTINGS_START_ON_ENTER_STOP_ON_LEAVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlertSettingsAllowableValues()
    {
        return [
            self::ALERT_SETTINGS_NONE,
            self::ALERT_SETTINGS_SEND_WHEN_ENTERING,
            self::ALERT_SETTINGS_SEND_WHEN_EXITING,
            self::ALERT_SETTINGS_SEND_WHEN_ENTERING_OR_EXITING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['geoFencingId'] = $data['geoFencingId'] ?? null;
        $this->container['orgId'] = $data['orgId'] ?? null;
        $this->container['createdByUserId'] = $data['createdByUserId'] ?? null;
        $this->container['lastUpdatedByUserId'] = $data['lastUpdatedByUserId'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['locationName'] = $data['locationName'] ?? null;
        $this->container['coordinates'] = $data['coordinates'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
        $this->container['triggerJobCodeId'] = $data['triggerJobCodeId'] ?? null;
        $this->container['triggerTaskId'] = $data['triggerTaskId'] ?? null;
        $this->container['triggerSettings'] = $data['triggerSettings'] ?? null;
        $this->container['alertToOrgGroupId'] = $data['alertToOrgGroupId'] ?? null;
        $this->container['alertSettings'] = $data['alertSettings'] ?? null;
        $this->container['startTimeHour'] = $data['startTimeHour'] ?? null;
        $this->container['startTimeMinute'] = $data['startTimeMinute'] ?? null;
        $this->container['endTimeHour'] = $data['endTimeHour'] ?? null;
        $this->container['endTimeMinute'] = $data['endTimeMinute'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTriggerSettingsAllowableValues();
        if (!is_null($this->container['triggerSettings']) && !in_array($this->container['triggerSettings'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'triggerSettings', must be one of '%s'",
                $this->container['triggerSettings'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAlertSettingsAllowableValues();
        if (!is_null($this->container['alertSettings']) && !in_array($this->container['alertSettings'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'alertSettings', must be one of '%s'",
                $this->container['alertSettings'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets geoFencingId
     *
     * @return int|null
     */
    public function getGeoFencingId()
    {
        return $this->container['geoFencingId'];
    }

    /**
     * Sets geoFencingId
     *
     * @param int|null $geoFencingId The ID of the geofence
     *
     * @return self
     */
    public function setGeoFencingId($geoFencingId)
    {
        $this->container['geoFencingId'] = $geoFencingId;

        return $this;
    }

    /**
     * Gets orgId
     *
     * @return int|null
     */
    public function getOrgId()
    {
        return $this->container['orgId'];
    }

    /**
     * Sets orgId
     *
     * @param int|null $orgId The ID of the organisation owning the geofence record
     *
     * @return self
     */
    public function setOrgId($orgId)
    {
        $this->container['orgId'] = $orgId;

        return $this;
    }

    /**
     * Gets createdByUserId
     *
     * @return int|null
     */
    public function getCreatedByUserId()
    {
        return $this->container['createdByUserId'];
    }

    /**
     * Sets createdByUserId
     *
     * @param int|null $createdByUserId The ID of the user/employee who created the geofence
     *
     * @return self
     */
    public function setCreatedByUserId($createdByUserId)
    {
        $this->container['createdByUserId'] = $createdByUserId;

        return $this;
    }

    /**
     * Gets lastUpdatedByUserId
     *
     * @return int|null
     */
    public function getLastUpdatedByUserId()
    {
        return $this->container['lastUpdatedByUserId'];
    }

    /**
     * Sets lastUpdatedByUserId
     *
     * @param int|null $lastUpdatedByUserId The ID of the user/employee who last updated the geofence
     *
     * @return self
     */
    public function setLastUpdatedByUserId($lastUpdatedByUserId)
    {
        $this->container['lastUpdatedByUserId'] = $lastUpdatedByUserId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name A descriptive name of the geofence
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets locationName
     *
     * @return string|null
     */
    public function getLocationName()
    {
        return $this->container['locationName'];
    }

    /**
     * Sets locationName
     *
     * @param string|null $locationName The name of the approx. location of the geofence
     *
     * @return self
     */
    public function setLocationName($locationName)
    {
        $this->container['locationName'] = $locationName;

        return $this;
    }

    /**
     * Gets coordinates
     *
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\BasicCoordinate[]|null
     */
    public function getCoordinates()
    {
        return $this->container['coordinates'];
    }

    /**
     * Sets coordinates
     *
     * @param \ChronoSheetsClient\ChronoSheetsClientLibModel\BasicCoordinate[]|null $coordinates A list of co-ordinates specifying the geofence
     *
     * @return self
     */
    public function setCoordinates($coordinates)
    {
        $this->container['coordinates'] = $coordinates;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt The date and time the geofence was created.  Time is in UTC.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt The date and time the geofence was updated last.  Time is in UTC.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets triggerJobCodeId
     *
     * @return int|null
     */
    public function getTriggerJobCodeId()
    {
        return $this->container['triggerJobCodeId'];
    }

    /**
     * Sets triggerJobCodeId
     *
     * @param int|null $triggerJobCodeId The ID of the job code used when the employee enters/exits the geofence
     *
     * @return self
     */
    public function setTriggerJobCodeId($triggerJobCodeId)
    {
        $this->container['triggerJobCodeId'] = $triggerJobCodeId;

        return $this;
    }

    /**
     * Gets triggerTaskId
     *
     * @return int|null
     */
    public function getTriggerTaskId()
    {
        return $this->container['triggerTaskId'];
    }

    /**
     * Sets triggerTaskId
     *
     * @param int|null $triggerTaskId The ID of the task used when the employee enters/exits the geofence
     *
     * @return self
     */
    public function setTriggerTaskId($triggerTaskId)
    {
        $this->container['triggerTaskId'] = $triggerTaskId;

        return $this;
    }

    /**
     * Gets triggerSettings
     *
     * @return string|null
     */
    public function getTriggerSettings()
    {
        return $this->container['triggerSettings'];
    }

    /**
     * Sets triggerSettings
     *
     * @param string|null $triggerSettings The settings for triggering actions
     *
     * @return self
     */
    public function setTriggerSettings($triggerSettings)
    {
        $allowedValues = $this->getTriggerSettingsAllowableValues();
        if (!is_null($triggerSettings) && !in_array($triggerSettings, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'triggerSettings', must be one of '%s'",
                    $triggerSettings,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['triggerSettings'] = $triggerSettings;

        return $this;
    }

    /**
     * Gets alertToOrgGroupId
     *
     * @return int|null
     */
    public function getAlertToOrgGroupId()
    {
        return $this->container['alertToOrgGroupId'];
    }

    /**
     * Sets alertToOrgGroupId
     *
     * @param int|null $alertToOrgGroupId The organisation group that will be notified when the geofence is triggered
     *
     * @return self
     */
    public function setAlertToOrgGroupId($alertToOrgGroupId)
    {
        $this->container['alertToOrgGroupId'] = $alertToOrgGroupId;

        return $this;
    }

    /**
     * Gets alertSettings
     *
     * @return string|null
     */
    public function getAlertSettings()
    {
        return $this->container['alertSettings'];
    }

    /**
     * Sets alertSettings
     *
     * @param string|null $alertSettings The settings for trigger alerts
     *
     * @return self
     */
    public function setAlertSettings($alertSettings)
    {
        $allowedValues = $this->getAlertSettingsAllowableValues();
        if (!is_null($alertSettings) && !in_array($alertSettings, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'alertSettings', must be one of '%s'",
                    $alertSettings,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['alertSettings'] = $alertSettings;

        return $this;
    }

    /**
     * Gets startTimeHour
     *
     * @return int|null
     */
    public function getStartTimeHour()
    {
        return $this->container['startTimeHour'];
    }

    /**
     * Sets startTimeHour
     *
     * @param int|null $startTimeHour The hour start time. E.g. 13 would be 1pm.  Time is in 24hr format.
     *
     * @return self
     */
    public function setStartTimeHour($startTimeHour)
    {
        $this->container['startTimeHour'] = $startTimeHour;

        return $this;
    }

    /**
     * Gets startTimeMinute
     *
     * @return int|null
     */
    public function getStartTimeMinute()
    {
        return $this->container['startTimeMinute'];
    }

    /**
     * Sets startTimeMinute
     *
     * @param int|null $startTimeMinute The minute start time.  E.g. 46 would be the 46th minute of the hour.
     *
     * @return self
     */
    public function setStartTimeMinute($startTimeMinute)
    {
        $this->container['startTimeMinute'] = $startTimeMinute;

        return $this;
    }

    /**
     * Gets endTimeHour
     *
     * @return int|null
     */
    public function getEndTimeHour()
    {
        return $this->container['endTimeHour'];
    }

    /**
     * Sets endTimeHour
     *
     * @param int|null $endTimeHour The hour end time. E.g. 21 would be 9pm.  Time is in 24hr format.
     *
     * @return self
     */
    public function setEndTimeHour($endTimeHour)
    {
        $this->container['endTimeHour'] = $endTimeHour;

        return $this;
    }

    /**
     * Gets endTimeMinute
     *
     * @return int|null
     */
    public function getEndTimeMinute()
    {
        return $this->container['endTimeMinute'];
    }

    /**
     * Sets endTimeMinute
     *
     * @param int|null $endTimeMinute The minute end time.  E.g. 13 would be the 13th minute of the hour.
     *
     * @return self
     */
    public function setEndTimeMinute($endTimeMinute)
    {
        $this->container['endTimeMinute'] = $endTimeMinute;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


