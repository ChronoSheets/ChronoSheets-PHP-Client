<?php
/**
 * CSFleetSummaryReportItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibModel;

use \ArrayAccess;
use \ChronoSheetsClient\ObjectSerializer;

/**
 * CSFleetSummaryReportItem Class Doc Comment
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CSFleetSummaryReportItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FleetSummaryReportItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'totalDistanceMetersFiltered' => 'double',
        'totalDistanceMeters' => 'double',
        'totalRunningCostDollarsFiltered' => 'double',
        'totalRunningCostDollars' => 'double',
        'id' => 'int',
        'organisationId' => 'int',
        'name' => 'string',
        'costPerKilometer' => 'double',
        'make' => 'string',
        'model' => 'string',
        'year' => 'string',
        'licencePlateNumber' => 'string',
        'isDeleted' => 'bool',
        'permittedEmployees' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'totalDistanceMetersFiltered' => 'double',
        'totalDistanceMeters' => 'double',
        'totalRunningCostDollarsFiltered' => 'double',
        'totalRunningCostDollars' => 'double',
        'id' => 'int32',
        'organisationId' => 'int32',
        'name' => null,
        'costPerKilometer' => 'double',
        'make' => null,
        'model' => null,
        'year' => null,
        'licencePlateNumber' => null,
        'isDeleted' => null,
        'permittedEmployees' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'totalDistanceMetersFiltered' => 'TotalDistanceMetersFiltered',
        'totalDistanceMeters' => 'TotalDistanceMeters',
        'totalRunningCostDollarsFiltered' => 'TotalRunningCostDollarsFiltered',
        'totalRunningCostDollars' => 'TotalRunningCostDollars',
        'id' => 'Id',
        'organisationId' => 'OrganisationId',
        'name' => 'Name',
        'costPerKilometer' => 'CostPerKilometer',
        'make' => 'Make',
        'model' => 'Model',
        'year' => 'Year',
        'licencePlateNumber' => 'LicencePlateNumber',
        'isDeleted' => 'IsDeleted',
        'permittedEmployees' => 'PermittedEmployees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'totalDistanceMetersFiltered' => 'setTotalDistanceMetersFiltered',
        'totalDistanceMeters' => 'setTotalDistanceMeters',
        'totalRunningCostDollarsFiltered' => 'setTotalRunningCostDollarsFiltered',
        'totalRunningCostDollars' => 'setTotalRunningCostDollars',
        'id' => 'setId',
        'organisationId' => 'setOrganisationId',
        'name' => 'setName',
        'costPerKilometer' => 'setCostPerKilometer',
        'make' => 'setMake',
        'model' => 'setModel',
        'year' => 'setYear',
        'licencePlateNumber' => 'setLicencePlateNumber',
        'isDeleted' => 'setIsDeleted',
        'permittedEmployees' => 'setPermittedEmployees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'totalDistanceMetersFiltered' => 'getTotalDistanceMetersFiltered',
        'totalDistanceMeters' => 'getTotalDistanceMeters',
        'totalRunningCostDollarsFiltered' => 'getTotalRunningCostDollarsFiltered',
        'totalRunningCostDollars' => 'getTotalRunningCostDollars',
        'id' => 'getId',
        'organisationId' => 'getOrganisationId',
        'name' => 'getName',
        'costPerKilometer' => 'getCostPerKilometer',
        'make' => 'getMake',
        'model' => 'getModel',
        'year' => 'getYear',
        'licencePlateNumber' => 'getLicencePlateNumber',
        'isDeleted' => 'getIsDeleted',
        'permittedEmployees' => 'getPermittedEmployees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['totalDistanceMetersFiltered'] = isset($data['totalDistanceMetersFiltered']) ? $data['totalDistanceMetersFiltered'] : null;
        $this->container['totalDistanceMeters'] = isset($data['totalDistanceMeters']) ? $data['totalDistanceMeters'] : null;
        $this->container['totalRunningCostDollarsFiltered'] = isset($data['totalRunningCostDollarsFiltered']) ? $data['totalRunningCostDollarsFiltered'] : null;
        $this->container['totalRunningCostDollars'] = isset($data['totalRunningCostDollars']) ? $data['totalRunningCostDollars'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['organisationId'] = isset($data['organisationId']) ? $data['organisationId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['costPerKilometer'] = isset($data['costPerKilometer']) ? $data['costPerKilometer'] : null;
        $this->container['make'] = isset($data['make']) ? $data['make'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['licencePlateNumber'] = isset($data['licencePlateNumber']) ? $data['licencePlateNumber'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['permittedEmployees'] = isset($data['permittedEmployees']) ? $data['permittedEmployees'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets totalDistanceMetersFiltered
     *
     * @return double
     */
    public function getTotalDistanceMetersFiltered()
    {
        return $this->container['totalDistanceMetersFiltered'];
    }

    /**
     * Sets totalDistanceMetersFiltered
     *
     * @param double $totalDistanceMetersFiltered totalDistanceMetersFiltered
     *
     * @return $this
     */
    public function setTotalDistanceMetersFiltered($totalDistanceMetersFiltered)
    {
        $this->container['totalDistanceMetersFiltered'] = $totalDistanceMetersFiltered;

        return $this;
    }

    /**
     * Gets totalDistanceMeters
     *
     * @return double
     */
    public function getTotalDistanceMeters()
    {
        return $this->container['totalDistanceMeters'];
    }

    /**
     * Sets totalDistanceMeters
     *
     * @param double $totalDistanceMeters totalDistanceMeters
     *
     * @return $this
     */
    public function setTotalDistanceMeters($totalDistanceMeters)
    {
        $this->container['totalDistanceMeters'] = $totalDistanceMeters;

        return $this;
    }

    /**
     * Gets totalRunningCostDollarsFiltered
     *
     * @return double
     */
    public function getTotalRunningCostDollarsFiltered()
    {
        return $this->container['totalRunningCostDollarsFiltered'];
    }

    /**
     * Sets totalRunningCostDollarsFiltered
     *
     * @param double $totalRunningCostDollarsFiltered totalRunningCostDollarsFiltered
     *
     * @return $this
     */
    public function setTotalRunningCostDollarsFiltered($totalRunningCostDollarsFiltered)
    {
        $this->container['totalRunningCostDollarsFiltered'] = $totalRunningCostDollarsFiltered;

        return $this;
    }

    /**
     * Gets totalRunningCostDollars
     *
     * @return double
     */
    public function getTotalRunningCostDollars()
    {
        return $this->container['totalRunningCostDollars'];
    }

    /**
     * Sets totalRunningCostDollars
     *
     * @param double $totalRunningCostDollars totalRunningCostDollars
     *
     * @return $this
     */
    public function setTotalRunningCostDollars($totalRunningCostDollars)
    {
        $this->container['totalRunningCostDollars'] = $totalRunningCostDollars;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organisationId
     *
     * @return int
     */
    public function getOrganisationId()
    {
        return $this->container['organisationId'];
    }

    /**
     * Sets organisationId
     *
     * @param int $organisationId organisationId
     *
     * @return $this
     */
    public function setOrganisationId($organisationId)
    {
        $this->container['organisationId'] = $organisationId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets costPerKilometer
     *
     * @return double
     */
    public function getCostPerKilometer()
    {
        return $this->container['costPerKilometer'];
    }

    /**
     * Sets costPerKilometer
     *
     * @param double $costPerKilometer costPerKilometer
     *
     * @return $this
     */
    public function setCostPerKilometer($costPerKilometer)
    {
        $this->container['costPerKilometer'] = $costPerKilometer;

        return $this;
    }

    /**
     * Gets make
     *
     * @return string
     */
    public function getMake()
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     *
     * @param string $make make
     *
     * @return $this
     */
    public function setMake($make)
    {
        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets year
     *
     * @return string
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param string $year year
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets licencePlateNumber
     *
     * @return string
     */
    public function getLicencePlateNumber()
    {
        return $this->container['licencePlateNumber'];
    }

    /**
     * Sets licencePlateNumber
     *
     * @param string $licencePlateNumber licencePlateNumber
     *
     * @return $this
     */
    public function setLicencePlateNumber($licencePlateNumber)
    {
        $this->container['licencePlateNumber'] = $licencePlateNumber;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted isDeleted
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets permittedEmployees
     *
     * @return int[]
     */
    public function getPermittedEmployees()
    {
        return $this->container['permittedEmployees'];
    }

    /**
     * Sets permittedEmployees
     *
     * @param int[] $permittedEmployees permittedEmployees
     *
     * @return $this
     */
    public function setPermittedEmployees($permittedEmployees)
    {
        $this->container['permittedEmployees'] = $permittedEmployees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


