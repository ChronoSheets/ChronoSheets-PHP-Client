<?php
/**
 * ClientSideUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChronoSheets API
 *
 * <div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChronoSheetsClient\ChronoSheetsClientLibModel;

use \ArrayAccess;
use \ChronoSheetsClient\ObjectSerializer;

/**
 * ClientSideUser Class Doc Comment
 *
 * @category Class
 * @package  ChronoSheetsClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClientSideUser implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClientSideUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'organisationId' => 'int',
        'userName' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'emailAddress' => 'string',
        'roles' => 'int',
        'alertSettings' => 'int',
        'setupWizardRequired' => 'bool',
        'isSubscribedToNewsletter' => 'bool',
        'organisation' => '\ChronoSheetsClient\ChronoSheetsClientLibModel\Organisation',
        'isPrimaryAccount' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'organisationId' => 'int32',
        'userName' => null,
        'firstName' => null,
        'lastName' => null,
        'emailAddress' => null,
        'roles' => 'int64',
        'alertSettings' => 'int64',
        'setupWizardRequired' => null,
        'isSubscribedToNewsletter' => null,
        'organisation' => null,
        'isPrimaryAccount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'organisationId' => 'OrganisationId',
        'userName' => 'UserName',
        'firstName' => 'FirstName',
        'lastName' => 'LastName',
        'emailAddress' => 'EmailAddress',
        'roles' => 'Roles',
        'alertSettings' => 'AlertSettings',
        'setupWizardRequired' => 'SetupWizardRequired',
        'isSubscribedToNewsletter' => 'IsSubscribedToNewsletter',
        'organisation' => 'Organisation',
        'isPrimaryAccount' => 'IsPrimaryAccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'organisationId' => 'setOrganisationId',
        'userName' => 'setUserName',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'emailAddress' => 'setEmailAddress',
        'roles' => 'setRoles',
        'alertSettings' => 'setAlertSettings',
        'setupWizardRequired' => 'setSetupWizardRequired',
        'isSubscribedToNewsletter' => 'setIsSubscribedToNewsletter',
        'organisation' => 'setOrganisation',
        'isPrimaryAccount' => 'setIsPrimaryAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'organisationId' => 'getOrganisationId',
        'userName' => 'getUserName',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'emailAddress' => 'getEmailAddress',
        'roles' => 'getRoles',
        'alertSettings' => 'getAlertSettings',
        'setupWizardRequired' => 'getSetupWizardRequired',
        'isSubscribedToNewsletter' => 'getIsSubscribedToNewsletter',
        'organisation' => 'getOrganisation',
        'isPrimaryAccount' => 'getIsPrimaryAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['organisationId'] = isset($data['organisationId']) ? $data['organisationId'] : null;
        $this->container['userName'] = isset($data['userName']) ? $data['userName'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['emailAddress'] = isset($data['emailAddress']) ? $data['emailAddress'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['alertSettings'] = isset($data['alertSettings']) ? $data['alertSettings'] : null;
        $this->container['setupWizardRequired'] = isset($data['setupWizardRequired']) ? $data['setupWizardRequired'] : null;
        $this->container['isSubscribedToNewsletter'] = isset($data['isSubscribedToNewsletter']) ? $data['isSubscribedToNewsletter'] : null;
        $this->container['organisation'] = isset($data['organisation']) ? $data['organisation'] : null;
        $this->container['isPrimaryAccount'] = isset($data['isPrimaryAccount']) ? $data['isPrimaryAccount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organisationId
     *
     * @return int|null
     */
    public function getOrganisationId()
    {
        return $this->container['organisationId'];
    }

    /**
     * Sets organisationId
     *
     * @param int|null $organisationId organisationId
     *
     * @return $this
     */
    public function setOrganisationId($organisationId)
    {
        $this->container['organisationId'] = $organisationId;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string|null $userName userName
     *
     * @return $this
     */
    public function setUserName($userName)
    {
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName firstName
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName lastName
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['emailAddress'];
    }

    /**
     * Sets emailAddress
     *
     * @param string|null $emailAddress emailAddress
     *
     * @return $this
     */
    public function setEmailAddress($emailAddress)
    {
        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return int|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param int|null $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets alertSettings
     *
     * @return int|null
     */
    public function getAlertSettings()
    {
        return $this->container['alertSettings'];
    }

    /**
     * Sets alertSettings
     *
     * @param int|null $alertSettings alertSettings
     *
     * @return $this
     */
    public function setAlertSettings($alertSettings)
    {
        $this->container['alertSettings'] = $alertSettings;

        return $this;
    }

    /**
     * Gets setupWizardRequired
     *
     * @return bool|null
     */
    public function getSetupWizardRequired()
    {
        return $this->container['setupWizardRequired'];
    }

    /**
     * Sets setupWizardRequired
     *
     * @param bool|null $setupWizardRequired setupWizardRequired
     *
     * @return $this
     */
    public function setSetupWizardRequired($setupWizardRequired)
    {
        $this->container['setupWizardRequired'] = $setupWizardRequired;

        return $this;
    }

    /**
     * Gets isSubscribedToNewsletter
     *
     * @return bool|null
     */
    public function getIsSubscribedToNewsletter()
    {
        return $this->container['isSubscribedToNewsletter'];
    }

    /**
     * Sets isSubscribedToNewsletter
     *
     * @param bool|null $isSubscribedToNewsletter isSubscribedToNewsletter
     *
     * @return $this
     */
    public function setIsSubscribedToNewsletter($isSubscribedToNewsletter)
    {
        $this->container['isSubscribedToNewsletter'] = $isSubscribedToNewsletter;

        return $this;
    }

    /**
     * Gets organisation
     *
     * @return \ChronoSheetsClient\ChronoSheetsClientLibModel\Organisation|null
     */
    public function getOrganisation()
    {
        return $this->container['organisation'];
    }

    /**
     * Sets organisation
     *
     * @param \ChronoSheetsClient\ChronoSheetsClientLibModel\Organisation|null $organisation organisation
     *
     * @return $this
     */
    public function setOrganisation($organisation)
    {
        $this->container['organisation'] = $organisation;

        return $this;
    }

    /**
     * Gets isPrimaryAccount
     *
     * @return bool|null
     */
    public function getIsPrimaryAccount()
    {
        return $this->container['isPrimaryAccount'];
    }

    /**
     * Sets isPrimaryAccount
     *
     * @param bool|null $isPrimaryAccount isPrimaryAccount
     *
     * @return $this
     */
    public function setIsPrimaryAccount($isPrimaryAccount)
    {
        $this->container['isPrimaryAccount'] = $isPrimaryAccount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


